// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`docs docs.json should match snapshot 1`] = `
"[
  {
    \\"name\\": \\"Canvas element\\",
    \\"description\\": \\"A collection of methods for getting and setting various properties of the canvas element.\\",
    \\"methods\\": [
      {
        \\"name\\": \\"getCanvas\\",
        \\"description\\": \\"Get the canvas element.\\",
        \\"alias\\": \\"getElement\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"HTMLCanvasElement\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"setDensity\\",
        \\"description\\": \\"Set the canvas pixel density.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"density\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getDensity\\",
        \\"description\\": \\"Get the canvas pixel density.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"setSize\\",
        \\"description\\": \\"Set the canvas dimensions.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"size\\",
                \\"alias\\": \\"{\\\\n  width: number;\\\\n  height: number;\\\\n}\\",
                \\"type\\": \\"Size\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          },
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"width\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"height\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"Size\\",
            \\"alias\\": \\"{\\\\n  width: number;\\\\n  height: number;\\\\n}\\"
          }
        ]
      },
      {
        \\"name\\": \\"getSize\\",
        \\"description\\": \\"Get the canvas dimensions.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"Size\\",
              \\"alias\\": \\"{\\\\n  width: number;\\\\n  height: number;\\\\n}\\"
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"Size\\",
            \\"alias\\": \\"{\\\\n  width: number;\\\\n  height: number;\\\\n}\\"
          }
        ]
      },
      {
        \\"name\\": \\"setWidth\\",
        \\"description\\": \\"Set the canvas width.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"width\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getWidth\\",
        \\"description\\": \\"Get the canvas width.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"setHeight\\",
        \\"description\\": \\"Set the canvas height.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"height\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getHeight\\",
        \\"description\\": \\"Get the canvas height.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getBoundingClientRect\\",
        \\"description\\": \\"Get the canvas size & position on screen.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"ClientRect\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      }
    ]
  },
  {
    \\"name\\": \\"Context\\",
    \\"description\\": \\"'A collection of methods for retrieving a canvas context or information about the context.\\",
    \\"methods\\": [
      {
        \\"name\\": \\"getContext\\",
        \\"description\\": \\"Get the standard canvas context (used for drawing).\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"type\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"contextAttributes\\",
                \\"alias\\": \\"Canvas2DContextAttributes | WebGLContextAttributes\\",
                \\"type\\": \\"CanvasContextAttributes\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"CanvasContext\\",
              \\"alias\\": \\"CanvasRenderingContext2D | WebGLRenderingContext | null\\"
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"CanvasContextAttributes\\",
            \\"alias\\": \\"Canvas2DContextAttributes | WebGLContextAttributes\\"
          },
          {
            \\"name\\": \\"CanvasContext\\",
            \\"alias\\": \\"CanvasRenderingContext2D | WebGLRenderingContext | null\\"
          }
        ]
      },
      {
        \\"name\\": \\"getCurrentContext\\",
        \\"description\\": \\"Get canvas context used by Canvasimo (2d).\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"CanvasRenderingContext2D\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getCurrentContextType\\",
        \\"description\\": \\"Get the context type used by Canvasimo ('2d', 'webgl', etc).\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"\\\\\\"2d\\\\\\"\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getContextAttributes\\",
        \\"description\\": \\"Get the context attributes used.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"CanvasContextAttributes\\",
              \\"alias\\": \\"Canvas2DContextAttributes | WebGLContextAttributes\\"
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"CanvasContextAttributes\\",
            \\"alias\\": \\"Canvas2DContextAttributes | WebGLContextAttributes\\"
          }
        ]
      }
    ]
  },
  {
    \\"name\\": \\"Solid Shapes\\",
    \\"description\\": \\"A collection of methods for plotting or drawing solid shapes -\\\\nthose that create a new shape when invoked, and are self closing.\\",
    \\"methods\\": [
      {
        \\"name\\": \\"plotRect\\",
        \\"description\\": \\"Plot a rectangle that can then have a fill or stroke applied to it.\\",
        \\"alias\\": \\"rect\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"width\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"height\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"strokeRect\\",
        \\"description\\": \\"Plot a rectangle and apply a stroke to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"width\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"height\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"fillRect\\",
        \\"description\\": \\"Plot a rectangle and apply a fill to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"width\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"height\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"plotRoundedRect\\",
        \\"description\\": \\"Plot a rounded rectangle that can then have a fill or stroke applied to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"width\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"height\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radius\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"strokeRoundedRect\\",
        \\"description\\": \\"Plot a rounded rectangle and apply a stroke to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"width\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"height\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radius\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"fillRoundedRect\\",
        \\"description\\": \\"Plot a rounded rectangle and apply a fill to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"width\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"height\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radius\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"plotCircle\\",
        \\"description\\": \\"Plot a circle that can then have a stroke or fill applied to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radius\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"anticlockwise\\",
                \\"alias\\": null,
                \\"type\\": \\"boolean\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"strokeCircle\\",
        \\"description\\": \\"Plot a circle and apply a stroke to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radius\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"anticlockwise\\",
                \\"alias\\": null,
                \\"type\\": \\"boolean\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"fillCircle\\",
        \\"description\\": \\"Plot a circle and apply a fill to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radius\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"anticlockwise\\",
                \\"alias\\": null,
                \\"type\\": \\"boolean\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"plotPoly\\",
        \\"description\\": \\"Plot a polygon that can then have a stroke or fill applied to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radius\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"sides\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"anticlockwise\\",
                \\"alias\\": null,
                \\"type\\": \\"boolean\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"strokePoly\\",
        \\"description\\": \\"Plot a polygon and apply a stoke to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radius\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"sides\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"anticlockwise\\",
                \\"alias\\": null,
                \\"type\\": \\"boolean\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"fillPoly\\",
        \\"description\\": \\"Plot a polygon and apply a fill to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radius\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"sides\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"anticlockwise\\",
                \\"alias\\": null,
                \\"type\\": \\"boolean\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"plotStar\\",
        \\"description\\": \\"Plot a star that can then have a stroke or fill applied to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radius1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"sides\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"anticlockwise\\",
                \\"alias\\": null,
                \\"type\\": \\"boolean\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"strokeStar\\",
        \\"description\\": \\"Plot a star and apply a stoke to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radius1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"sides\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"anticlockwise\\",
                \\"alias\\": null,
                \\"type\\": \\"boolean\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"fillStar\\",
        \\"description\\": \\"Plot a star and apply a fill to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radius1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"sides\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"anticlockwise\\",
                \\"alias\\": null,
                \\"type\\": \\"boolean\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"plotBurst\\",
        \\"description\\": \\"Plot a burst that can then have a stroke or fill applied to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radius1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radius2\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"sides\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"anticlockwise\\",
                \\"alias\\": null,
                \\"type\\": \\"boolean\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"strokeBurst\\",
        \\"description\\": \\"Plot a burst and apply a stoke to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radius1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radius2\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"sides\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"anticlockwise\\",
                \\"alias\\": null,
                \\"type\\": \\"boolean\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"fillBurst\\",
        \\"description\\": \\"Plot a burst and apply a fill to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radius1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radius2\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"sides\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"anticlockwise\\",
                \\"alias\\": null,
                \\"type\\": \\"boolean\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"plotPixel\\",
        \\"description\\": \\"Plot a single pixel that can then have a stroke or fill applied to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"strokePixel\\",
        \\"description\\": \\"Plot a single pixel and apply a stroke to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"fillPixel\\",
        \\"description\\": \\"Plot a single pixel and apply a fill to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"plotClosedPath\\",
        \\"description\\": \\"Plot a closed path that can then have a stroke or fill applied to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"points\\",
                \\"alias\\": \\"Array<{x: number, y: number}> | Array<[number, number]> | number[]\\",
                \\"type\\": \\"Points\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"Points\\",
            \\"alias\\": \\"Array<{x: number, y: number}> | Array<[number, number]> | number[]\\"
          }
        ]
      },
      {
        \\"name\\": \\"strokeClosedPath\\",
        \\"description\\": \\"Plot a closed path and apply a stroke to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"points\\",
                \\"alias\\": \\"Array<{x: number, y: number}> | Array<[number, number]> | number[]\\",
                \\"type\\": \\"Points\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"Points\\",
            \\"alias\\": \\"Array<{x: number, y: number}> | Array<[number, number]> | number[]\\"
          }
        ]
      },
      {
        \\"name\\": \\"fillClosedPath\\",
        \\"description\\": \\"Plot a closed path and apply a fill to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"points\\",
                \\"alias\\": \\"Array<{x: number, y: number}> | Array<[number, number]> | number[]\\",
                \\"type\\": \\"Points\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"Points\\",
            \\"alias\\": \\"Array<{x: number, y: number}> | Array<[number, number]> | number[]\\"
          }
        ]
      }
    ]
  },
  {
    \\"name\\": \\"Open Shapes\\",
    \\"description\\": \\"A collection of methods for plotting or drawing open shapes -\\\\nthose that create a new shape when invoked, but are not self closing.\\",
    \\"methods\\": [
      {
        \\"name\\": \\"plotLine\\",
        \\"description\\": \\"Plot a line that can then have a stroke or fill applied to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"x2\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y2\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"strokeLine\\",
        \\"description\\": \\"Plot a line and apply a stroke to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"x2\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y2\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"plotLength\\",
        \\"description\\": \\"Plot a line, by length & angle, that can then have a stroke or fill applied to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"length\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"angle\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"strokeLength\\",
        \\"description\\": \\"Plot a line, by length & angle, and apply a stroke to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"length\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"angle\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"plotPath\\",
        \\"description\\": \\"Plot a path, that is not self closing, that can have a stroke or fill applied to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"points\\",
                \\"alias\\": \\"Array<{x: number, y: number}> | Array<[number, number]> | number[]\\",
                \\"type\\": \\"Points\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"Points\\",
            \\"alias\\": \\"Array<{x: number, y: number}> | Array<[number, number]> | number[]\\"
          }
        ]
      },
      {
        \\"name\\": \\"strokePath\\",
        \\"description\\": \\"Plot a path, that is not self closing, and apply a stroke to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"points\\",
                \\"alias\\": \\"Array<{x: number, y: number}> | Array<[number, number]> | number[]\\",
                \\"type\\": \\"Points\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"Points\\",
            \\"alias\\": \\"Array<{x: number, y: number}> | Array<[number, number]> | number[]\\"
          }
        ]
      },
      {
        \\"name\\": \\"fillPath\\",
        \\"description\\": \\"Plot a path, that is not self closing, and apply a fill to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"points\\",
                \\"alias\\": \\"Array<{x: number, y: number}> | Array<[number, number]> | number[]\\",
                \\"type\\": \\"Points\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"Points\\",
            \\"alias\\": \\"Array<{x: number, y: number}> | Array<[number, number]> | number[]\\"
          }
        ]
      }
    ]
  },
  {
    \\"name\\": \\"Paths\\",
    \\"description\\": \\"A collection of methods for plotting or drawing paths -\\\\nshapes that can be connected to create more complex shapes.\\",
    \\"methods\\": [
      {
        \\"name\\": \\"plotArc\\",
        \\"description\\": \\"Plot an arc that can have a stroke or fill applied to it.\\",
        \\"alias\\": \\"arc\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radius\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"startAngle\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"endAngle\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"anticlockwise\\",
                \\"alias\\": null,
                \\"type\\": \\"boolean\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"strokeArc\\",
        \\"description\\": \\"Plot an arc and apply a stroke to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radius\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"startAngle\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"endAngle\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"anticlockwise\\",
                \\"alias\\": null,
                \\"type\\": \\"boolean\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"fillArc\\",
        \\"description\\": \\"Plot an arc and apply a fill to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radius\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"startAngle\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"endAngle\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"anticlockwise\\",
                \\"alias\\": null,
                \\"type\\": \\"boolean\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"plotEllipse\\",
        \\"description\\": \\"Plot an ellipse that can then have a stroke or fill applied to it.\\",
        \\"alias\\": \\"ellipse\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radiusX\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radiusY\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"rotation\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"startAngle\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"endAngle\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"anticlockwise\\",
                \\"alias\\": null,
                \\"type\\": \\"boolean\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"strokeEllipse\\",
        \\"description\\": \\"Plot an ellipse and apply a stroke to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radiusX\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radiusY\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"rotation\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"startAngle\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"endAngle\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"anticlockwise\\",
                \\"alias\\": null,
                \\"type\\": \\"boolean\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"fillEllipse\\",
        \\"description\\": \\"Plot an ellipse and apply a fill to it.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radiusX\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radiusY\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"rotation\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"startAngle\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"endAngle\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"anticlockwise\\",
                \\"alias\\": null,
                \\"type\\": \\"boolean\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      }
    ]
  },
  {
    \\"name\\": \\"Text\\",
    \\"description\\": \\"A collection of methods for drawing text,\\\\nand getting and setting properties related to text rendering.\\",
    \\"methods\\": [
      {
        \\"name\\": \\"strokeText\\",
        \\"description\\": \\"Draw a text with a stroke.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"text\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"maxWidth\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"fillText\\",
        \\"description\\": \\"Draw a text with a fill.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"text\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"maxWidth\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"strokeTextMultiline\\",
        \\"description\\": \\"Draw text with a stroke, wrapped at newlines and automatically wrapped if the text exceeds the maxWidth.\\\\nIf no maxWidth is specified text will only wrap at newlines (wordBreak is ignore).\\\\nWords will not break by default (normal) and therefore may overflow.\\\\nbreak-all will break words wherever possible, and break-word will only break words if there is not enough room.\\\\nThe lineHeight parameter is a multiplier for the font size, and defaults to 1.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"text\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"maxWidth\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"wordBreak\\",
                \\"alias\\": \\"'normal' | 'break-word' | 'break-all'\\",
                \\"type\\": \\"WordBreak\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"lineHeight\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"WordBreak\\",
            \\"alias\\": \\"'normal' | 'break-word' | 'break-all'\\"
          }
        ]
      },
      {
        \\"name\\": \\"fillTextMultiline\\",
        \\"description\\": \\"Draw text with a fill, wrapped at newlines and automatically wrapped if the text exceeds the maxWidth.\\\\nIf no maxWidth is specified text will only wrap at newlines (wordBreak is ignore).\\\\nWords will not break by default (normal) and therefore may overflow.\\\\nbreak-all will break words wherever possible, and break-word will only break words if there is not enough room.\\\\nThe lineHeight parameter is a multiplier for the font size, and defaults to 1.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"text\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"maxWidth\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"wordBreak\\",
                \\"alias\\": \\"'normal' | 'break-word' | 'break-all'\\",
                \\"type\\": \\"WordBreak\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"lineHeight\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"WordBreak\\",
            \\"alias\\": \\"'normal' | 'break-word' | 'break-all'\\"
          }
        ]
      },
      {
        \\"name\\": \\"getTextSize\\",
        \\"description\\": \\"Get information about the size text will be drawn.\\",
        \\"alias\\": \\"measureText\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"text\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"TextMetrics\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"setTextAlign\\",
        \\"description\\": \\"Set the horizontal text alignment.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"value\\",
                \\"alias\\": \\"'left' | 'right' | 'center' | 'start' | 'end'\\",
                \\"type\\": \\"TextAlign\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"TextAlign\\",
            \\"alias\\": \\"'left' | 'right' | 'center' | 'start' | 'end'\\"
          }
        ]
      },
      {
        \\"name\\": \\"getTextAlign\\",
        \\"description\\": \\"Get the horizontal text alignment.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"TextAlign\\",
              \\"alias\\": \\"'left' | 'right' | 'center' | 'start' | 'end'\\"
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"TextAlign\\",
            \\"alias\\": \\"'left' | 'right' | 'center' | 'start' | 'end'\\"
          }
        ]
      },
      {
        \\"name\\": \\"setTextBaseline\\",
        \\"description\\": \\"Set the vertical text alignment.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"value\\",
                \\"alias\\": \\"'top' | 'hanging' | 'middle' | 'alphabetic' | 'ideographic' | 'bottom'\\",
                \\"type\\": \\"TextBaseline\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"TextBaseline\\",
            \\"alias\\": \\"'top' | 'hanging' | 'middle' | 'alphabetic' | 'ideographic' | 'bottom'\\"
          }
        ]
      },
      {
        \\"name\\": \\"getTextBaseline\\",
        \\"description\\": \\"Get the vertical text alignment.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"TextBaseline\\",
              \\"alias\\": \\"'top' | 'hanging' | 'middle' | 'alphabetic' | 'ideographic' | 'bottom'\\"
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"TextBaseline\\",
            \\"alias\\": \\"'top' | 'hanging' | 'middle' | 'alphabetic' | 'ideographic' | 'bottom'\\"
          }
        ]
      }
    ]
  },
  {
    \\"name\\": \\"Fonts\\",
    \\"description\\": \\"A collection of methods for getting and setting font styles and variations.\\",
    \\"methods\\": [
      {
        \\"name\\": \\"setFont\\",
        \\"description\\": \\"Set the font to use.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"font\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getFont\\",
        \\"description\\": \\"Get the font that is being used.\\\\nThis returns the exact CanvasRenderingContext2D.font string.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"string\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"setFontFamily\\",
        \\"description\\": \\"Set the font family to use.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"family\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getFontFamily\\",
        \\"description\\": \\"Get the font that is being used.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"string\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"setFontSize\\",
        \\"description\\": \\"Set the font size to use.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"size\\",
                \\"alias\\": null,
                \\"type\\": \\"string | number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getFontSize\\",
        \\"description\\": \\"Get the font size that is being used.\\\\nReturns null if using a special font e.g. caption, icon, menu.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"setFontStyle\\",
        \\"description\\": \\"Set the font style to use.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"style\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getFontStyle\\",
        \\"description\\": \\"Get the font style that is being used.\\\\nReturns null if using a special font e.g. caption, icon, menu.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"string\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"setFontVariant\\",
        \\"description\\": \\"Set the font variant to use.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"variant\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getFontVariant\\",
        \\"description\\": \\"Get the font variant that is being used.\\\\nReturns null if using a special font e.g. caption, icon, menu.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"string\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"setFontWeight\\",
        \\"description\\": \\"Set the font weight to use.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"weight\\",
                \\"alias\\": null,
                \\"type\\": \\"string | number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getFontWeight\\",
        \\"description\\": \\"Get the font weight that is being used.\\\\nReturns null if using a special font e.g. caption, icon, menu.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"string | number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      }
    ]
  },
  {
    \\"name\\": \\"Stroke Styles\\",
    \\"description\\": \\"A collection of methods for getting and setting stroke styles,\\\\nand applying strokes to existing shapes.\\",
    \\"methods\\": [
      {
        \\"name\\": \\"stroke\\",
        \\"description\\": \\"Apply a stroke to the current shape.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          },
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"path\\",
                \\"alias\\": null,
                \\"type\\": \\"Path2D\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          },
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"path\\",
                \\"alias\\": null,
                \\"type\\": \\"Path2D\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"setStroke\\",
        \\"description\\": \\"Set the stroke style to use.\\",
        \\"alias\\": \\"setStrokeStyle\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"value\\",
                \\"alias\\": \\"string | CanvasGradient | CanvasPattern\\",
                \\"type\\": \\"FillOrStrokeStyle\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"FillOrStrokeStyle\\",
            \\"alias\\": \\"string | CanvasGradient | CanvasPattern\\"
          }
        ]
      },
      {
        \\"name\\": \\"getStroke\\",
        \\"description\\": \\"Get the stroke style that is being used.\\",
        \\"alias\\": \\"getStrokeStyle\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"FillOrStrokeStyle\\",
              \\"alias\\": \\"string | CanvasGradient | CanvasPattern\\"
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"FillOrStrokeStyle\\",
            \\"alias\\": \\"string | CanvasGradient | CanvasPattern\\"
          }
        ]
      },
      {
        \\"name\\": \\"setStrokeCap\\",
        \\"description\\": \\"Set the stroke cap to use.\\",
        \\"alias\\": \\"setLineCap\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"value\\",
                \\"alias\\": \\"'butt' | 'round' | 'square'\\",
                \\"type\\": \\"LineCap\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"LineCap\\",
            \\"alias\\": \\"'butt' | 'round' | 'square'\\"
          }
        ]
      },
      {
        \\"name\\": \\"getStrokeCap\\",
        \\"description\\": \\"Get the stroke cap that is being used.\\",
        \\"alias\\": \\"getLineCap\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"LineCap\\",
              \\"alias\\": \\"'butt' | 'round' | 'square'\\"
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"LineCap\\",
            \\"alias\\": \\"'butt' | 'round' | 'square'\\"
          }
        ]
      },
      {
        \\"name\\": \\"setStrokeDash\\",
        \\"description\\": \\"Set the stroke dash to use.\\",
        \\"alias\\": \\"setLineDash\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"segments\\",
                \\"alias\\": null,
                \\"type\\": \\"number[]\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getStrokeDash\\",
        \\"description\\": \\"Get the stroke dash that is being used.\\",
        \\"alias\\": \\"getLineDash\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"number[]\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"setStrokeDashOffset\\",
        \\"description\\": \\"Set the stroke dash offset to use.\\",
        \\"alias\\": \\"setLineDashOffset\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"value\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getStrokeDashOffset\\",
        \\"description\\": \\"Get the stroke dash offset that is being used.\\",
        \\"alias\\": \\"getLineDashOffset\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"setStrokeJoin\\",
        \\"description\\": \\"Set the stroke join to use.\\",
        \\"alias\\": \\"setLineJoin\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"value\\",
                \\"alias\\": \\"'bevel' | 'round' | 'miter'\\",
                \\"type\\": \\"LineJoin\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"LineJoin\\",
            \\"alias\\": \\"'bevel' | 'round' | 'miter'\\"
          }
        ]
      },
      {
        \\"name\\": \\"getStrokeJoin\\",
        \\"description\\": \\"Get the stroke join that is being used.\\",
        \\"alias\\": \\"getLineJoin\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"LineJoin\\",
              \\"alias\\": \\"'bevel' | 'round' | 'miter'\\"
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"LineJoin\\",
            \\"alias\\": \\"'bevel' | 'round' | 'miter'\\"
          }
        ]
      },
      {
        \\"name\\": \\"setStrokeWidth\\",
        \\"description\\": \\"Set the stroke width to use.\\",
        \\"alias\\": \\"setLineWidth\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"value\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getStrokeWidth\\",
        \\"description\\": \\"Get the stroke width that is being used.\\",
        \\"alias\\": \\"getLineWidth\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"setMiterLimit\\",
        \\"description\\": \\"Set the miter limit to use.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"value\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getMiterLimit\\",
        \\"description\\": \\"Get the miter limit that is being used.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      }
    ]
  },
  {
    \\"name\\": \\"Fill styles\\",
    \\"description\\": \\"A collection of methods for getting and setting fill styles,\\\\nand applying fills to existing shapes.\\",
    \\"methods\\": [
      {
        \\"name\\": \\"fill\\",
        \\"description\\": \\"Apply a fill to the current shape.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          },
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"fillRule\\",
                \\"alias\\": \\"'nonzero' | 'evenodd'\\",
                \\"type\\": \\"FillRule\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          },
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"fillRule\\",
                \\"alias\\": \\"'nonzero' | 'evenodd'\\",
                \\"type\\": \\"FillRule\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"FillRule\\",
            \\"alias\\": \\"'nonzero' | 'evenodd'\\"
          }
        ]
      },
      {
        \\"name\\": \\"fillCanvas\\",
        \\"description\\": \\"Apply a fill to the entire canvas area.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"clearCanvas\\",
        \\"description\\": \\"Clear the entire canvas area\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"clearRect\\",
        \\"description\\": \\"Clear a rectangular area of the canvas.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"width\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"height\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"setFill\\",
        \\"description\\": \\"Set the fill to use.\\",
        \\"alias\\": \\"setFillStyle\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"value\\",
                \\"alias\\": \\"string | CanvasGradient | CanvasPattern\\",
                \\"type\\": \\"FillOrStrokeStyle\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"FillOrStrokeStyle\\",
            \\"alias\\": \\"string | CanvasGradient | CanvasPattern\\"
          }
        ]
      },
      {
        \\"name\\": \\"getFill\\",
        \\"description\\": \\"Get the fill that is being used.\\",
        \\"alias\\": \\"getFillStyle\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"FillOrStrokeStyle\\",
              \\"alias\\": \\"string | CanvasGradient | CanvasPattern\\"
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"FillOrStrokeStyle\\",
            \\"alias\\": \\"string | CanvasGradient | CanvasPattern\\"
          }
        ]
      },
      {
        \\"name\\": \\"createLinearGradient\\",
        \\"description\\": \\"Create a linear gradient to use as a fill.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x0\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y0\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"x1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"CanvasGradient\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"createRadialGradient\\",
        \\"description\\": \\"Create a radial gradient to use as a fill.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x0\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y0\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"r0\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"x1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"r1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"CanvasGradient\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"createPattern\\",
        \\"description\\": \\"Create a pattern to be used as a fill.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"image\\",
                \\"alias\\": null,
                \\"type\\": \\"HTMLCanvasElement | HTMLImageElement | HTMLVideoElement\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"repetition\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"CanvasPattern\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"drawImage\\",
        \\"description\\": \\"Draw an image to the canvas.\\\\nIf the second position / size arguments are supplied, the first will be used for cropping the image,\\\\nand the second for the position and size it will be drawn.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"image\\",
                \\"alias\\": \\"HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap\\",
                \\"type\\": \\"ImageLike\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"dstX\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"dstY\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          },
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"image\\",
                \\"alias\\": \\"HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap\\",
                \\"type\\": \\"ImageLike\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"dstX\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"dstY\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"dstW\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"dstH\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          },
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"image\\",
                \\"alias\\": \\"HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap\\",
                \\"type\\": \\"ImageLike\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"srcX\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"srcY\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"srcW\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"srcH\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"dstX\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"dstY\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"dstW\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"dstH\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"ImageLike\\",
            \\"alias\\": \\"HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap\\"
          }
        ]
      }
    ]
  },
  {
    \\"name\\": \\"Image Data\\",
    \\"description\\": \\"A collection of methods for creating, putting, or getting image data about the canvas.\\",
    \\"methods\\": [
      {
        \\"name\\": \\"getDataURL\\",
        \\"description\\": \\"Get a data URL of the current canvas state.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"type\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"...args\\",
                \\"alias\\": null,
                \\"type\\": \\"any[]\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"string\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"createImageData\\",
        \\"description\\": \\"Create image data with either the width and height specified,\\\\nor with the width and height of a the image data supplied.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"width\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"height\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"ImageData\\",
              \\"alias\\": null
            }
          },
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"ImageData\\",
                \\"alias\\": null,
                \\"type\\": \\"ImageData\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"ImageData\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getImageData\\",
        \\"description\\": \\"Get the image data from an area of the canvas.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"sx\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"sy\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"sw\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"sh\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"ImageData\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"putImageData\\",
        \\"description\\": \\"Draw image data onto the canvas.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"imagedata\\",
                \\"alias\\": null,
                \\"type\\": \\"ImageData\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"dx\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"dy\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"dirtyX\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"dirtyY\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"dirtyWidth\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": true
              },
              {
                \\"name\\": \\"dirtyHeight\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getPixelData\\",
        \\"description\\": \\"Get image data about a specific pixel.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Uint8ClampedArray\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getPixelColor\\",
        \\"description\\": \\"Get the color of a specific pixel.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"string\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      }
    ]
  },
  {
    \\"name\\": \\"Color Helpers\\",
    \\"description\\": \\"A collection of methods to help with creating color strings.\\",
    \\"methods\\": [
      {
        \\"name\\": \\"createHSL\\",
        \\"description\\": \\"Create an HSL color string from the given values.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"h\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"s\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"l\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"string\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"createHSLA\\",
        \\"description\\": \\"Create an HSLA color string from the given values.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"h\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"s\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"l\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"a\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"string\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"createRGB\\",
        \\"description\\": \\"Create an RGB color string from the given values.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"r\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"g\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"b\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"string\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"createRGBA\\",
        \\"description\\": \\"Create an RGBA color string from the given values.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"r\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"g\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"b\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"a\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"string\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getHSLFromHSLA\\",
        \\"description\\": \\"Return an HSL color string from the given HSLA color string.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"string\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getRGBFromRGBA\\",
        \\"description\\": \\"Return an RGB color string from the given RGBA color string.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"color\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"string\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      }
    ]
  },
  {
    \\"name\\": \\"Converting Sizes\\",
    \\"description\\": \\"A collection of methods to help with calculating and converting sizes, and distances.\\",
    \\"methods\\": [
      {
        \\"name\\": \\"getFractionFromPercent\\",
        \\"description\\": \\"Get a fraction from the provided percent value e.g. 80 returns 0.8.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"percent\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getPercentFromFraction\\",
        \\"description\\": \\"Get a percent from the provided fraction value e.g. 0.7 returns 70.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"fraction\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getFractionOfWidth\\",
        \\"description\\": \\"Returns the actual value of a fraction of the canvas width e.g.\\\\na canvas with a width of 200 returns 100 if the provided value is 0.5.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"fraction\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getFractionOfHeight\\",
        \\"description\\": \\"Returns the actual value of a fraction of the canvas height e.g.\\\\na canvas with a height of 100 returns 20 if the provided value is 0.2.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"fraction\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getPercentOfWidth\\",
        \\"description\\": \\"Returns the actual value of a percentage of the canvas width e.g.\\\\na canvas with a width of 200 returns 100 if the provided value is 50.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"percent\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getPercentOfHeight\\",
        \\"description\\": \\"Returns the actual value of a percentage of the canvas height e.g.\\\\na canvas with a height of 100 returns 20 if the provided value is 20.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"percent\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getDistance\\",
        \\"description\\": \\"Returns the distance between 2 points.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"x2\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y2\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      }
    ]
  },
  {
    \\"name\\": \\"Converting Angles\\",
    \\"description\\": \\"A collection of methods to help with calculating and converting angles.\\",
    \\"methods\\": [
      {
        \\"name\\": \\"getRadiansFromDegrees\\",
        \\"description\\": \\"Get a radian value from the provided degrees e.g. 90 returns 1.5708.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"degrees\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getDegreesFromRadians\\",
        \\"description\\": \\"Get a degree value from the provided radians e.g. 3.14159 returns 180.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"radians\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getAngle\\",
        \\"description\\": \\"Get the angle (in radians) between 2 or 3 points.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"x2\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y2\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          },
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"x2\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y2\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"x3\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y3\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      }
    ]
  },
  {
    \\"name\\": \\"Path Plotting\\",
    \\"description\\": \\"A collection of methods for path drawing.\\",
    \\"methods\\": [
      {
        \\"name\\": \\"beginPath\\",
        \\"description\\": \\"Begin a new path (shape).\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"closePath\\",
        \\"description\\": \\"Close the current path (shape).\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"moveTo\\",
        \\"description\\": \\"Move the starting point of a the next sub-path.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"lineTo\\",
        \\"description\\": \\"Connect the last point to the provided coordinates.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"arcTo\\",
        \\"description\\": \\"Arc from one point to another.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y1\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"x2\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y2\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"radius\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"bezierCurveTo\\",
        \\"description\\": \\"Connect the last point to the provided coordinates with a bezier curve (2 control points).\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"cp1x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"cp1y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"cp2x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"cp2y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"quadraticCurveTo\\",
        \\"description\\": \\"Connect the last point to the provided coordinates with a quadratic curve (1 control point).\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"cpx\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"cpy\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      }
    ]
  },
  {
    \\"name\\": \\"Canvas State\\",
    \\"description\\": \\"A collection of methods to save, restore, or transform the canvas state.\\",
    \\"methods\\": [
      {
        \\"name\\": \\"save\\",
        \\"description\\": \\"Push the current state of the canvas into a stack that can later be restored.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"restore\\",
        \\"description\\": \\"Restore the most recent state of the canvas that was saved.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"rotate\\",
        \\"description\\": \\"Add rotation (in radians) to the transform matrix so that shapes can be drawn at an angle.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"angle\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"scale\\",
        \\"description\\": \\"Scale the transform matrix so that shapes can be drawn at the provided scale.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"translate\\",
        \\"description\\": \\"Move the canvas origin.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"transform\\",
        \\"description\\": \\"Multiply the current transformation with the provided matrix.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"m11\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"m12\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"m21\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"m22\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"dx\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"dy\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"setTransform\\",
        \\"description\\": \\"Replace the current transformation with the provided matrix.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"m11\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"m12\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"m21\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"m22\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"dx\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"dy\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"resetTransform\\",
        \\"description\\": \\"Replace the current transformation with the default matrix: [1, 0, 0, 1, 0, 0].\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"clip\\",
        \\"description\\": \\"Use the current path as a clipping path.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"fillRules\\",
                \\"alias\\": \\"'nonzero' | 'evenodd'\\",
                \\"type\\": \\"FillRule\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"FillRule\\",
            \\"alias\\": \\"'nonzero' | 'evenodd'\\"
          }
        ]
      },
      {
        \\"name\\": \\"setOpacity\\",
        \\"description\\": \\"Set the opacity to use for drawing.\\",
        \\"alias\\": \\"setGlobalAlpha\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"value\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getOpacity\\",
        \\"description\\": \\"Get the opacity that is being used.\\",
        \\"alias\\": \\"getGlobalAlpha\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"setCompositeOperation\\",
        \\"description\\": \\"Set the composite operation to use for drawing.\\",
        \\"alias\\": \\"setGlobalCompositeOperation\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"value\\",
                \\"alias\\": \\"'source-over' | 'source-in' | 'source-out' | 'source-atop' | 'destination-over' | 'destination-in' | 'destination-out' | 'destination-atop' | 'lighter' | 'copy' | 'xor' | 'multiply' | 'screen' | 'overlay' | 'darken' | 'lighten' | 'color-dodge' | 'color-burn' | 'hard-light' | 'soft-light' | 'difference' | 'exclusion' | 'hue' | 'saturation' | 'color' | 'luminosity'\\",
                \\"type\\": \\"GlobalCompositeOperation\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"GlobalCompositeOperation\\",
            \\"alias\\": \\"'source-over' | 'source-in' | 'source-out' | 'source-atop' | 'destination-over' | 'destination-in' | 'destination-out' | 'destination-atop' | 'lighter' | 'copy' | 'xor' | 'multiply' | 'screen' | 'overlay' | 'darken' | 'lighten' | 'color-dodge' | 'color-burn' | 'hard-light' | 'soft-light' | 'difference' | 'exclusion' | 'hue' | 'saturation' | 'color' | 'luminosity'\\"
          }
        ]
      },
      {
        \\"name\\": \\"getCompositeOperation\\",
        \\"description\\": \\"Get the composite operation that is being used.\\",
        \\"alias\\": \\"getGlobalCompositeOperation\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"GlobalCompositeOperation\\",
              \\"alias\\": \\"'source-over' | 'source-in' | 'source-out' | 'source-atop' | 'destination-over' | 'destination-in' | 'destination-out' | 'destination-atop' | 'lighter' | 'copy' | 'xor' | 'multiply' | 'screen' | 'overlay' | 'darken' | 'lighten' | 'color-dodge' | 'color-burn' | 'hard-light' | 'soft-light' | 'difference' | 'exclusion' | 'hue' | 'saturation' | 'color' | 'luminosity'\\"
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"GlobalCompositeOperation\\",
            \\"alias\\": \\"'source-over' | 'source-in' | 'source-out' | 'source-atop' | 'destination-over' | 'destination-in' | 'destination-out' | 'destination-atop' | 'lighter' | 'copy' | 'xor' | 'multiply' | 'screen' | 'overlay' | 'darken' | 'lighten' | 'color-dodge' | 'color-burn' | 'hard-light' | 'soft-light' | 'difference' | 'exclusion' | 'hue' | 'saturation' | 'color' | 'luminosity'\\"
          }
        ]
      },
      {
        \\"name\\": \\"setImageSmoothingEnabled\\",
        \\"description\\": \\"Set whether image smoothing should be used.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"value\\",
                \\"alias\\": null,
                \\"type\\": \\"boolean\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getImageSmoothingEnabled\\",
        \\"description\\": \\"Get whether image smoothing is being used.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"boolean\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"setShadowBlur\\",
        \\"description\\": \\"Set how blurry shadows are.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"value\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getShadowBlur\\",
        \\"description\\": \\"Get the value of how blurry shadows are.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"setShadowColor\\",
        \\"description\\": \\"Set the color to be used for shadows.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"value\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getShadowColor\\",
        \\"description\\": \\"Get the color being used for shadows.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"string\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"setShadowOffsetX\\",
        \\"description\\": \\"Set how horizontally offset shadows should be.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"value\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getShadowOffsetX\\",
        \\"description\\": \\"Get the value of how horizontally offset shadows should be.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"setShadowOffsetY\\",
        \\"description\\": \\"Set how vertically offset shadows should be.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"value\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getShadowOffsetY\\",
        \\"description\\": \\"Get the value of how vertically offset shadows should be.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      }
    ]
  },
  {
    \\"name\\": \\"Misc\\",
    \\"description\\": \\"Miscellaneous methods.\\",
    \\"methods\\": [
      {
        \\"name\\": \\"tap\\",
        \\"description\\": \\"Break out of the method chain and execute a callback.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"callback\\",
                \\"alias\\": null,
                \\"type\\": \\"() => any\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"repeat\\",
        \\"description\\": \\"Break out of the method chain and execute a callback with values between start and end,\\\\nincreasing / decreasing by step (start defaults to 0, step defaults to 1).\\\\nYou may return false from the callback at any point to stop at the current iteration.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"end\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"callback\\",
                \\"alias\\": null,
                \\"type\\": \\"(i: number) => any\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          },
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"start\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"end\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"callback\\",
                \\"alias\\": null,
                \\"type\\": \\"(i: number) => any\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          },
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"start\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"end\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"step\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"callback\\",
                \\"alias\\": null,
                \\"type\\": \\"(i: number) => any\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"forEach\\",
        \\"description\\": \\"Break out of the method chain and loop over the given array, object or string,\\\\ncalling the callback with the value & key / index.\\\\nYou may return false from the callback at any point to stop at the current iteration.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"str\\",
                \\"alias\\": null,
                \\"type\\": \\"string\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"callback\\",
                \\"alias\\": null,
                \\"type\\": \\"(value: string, index: number) => any\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          },
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"obj\\",
                \\"alias\\": null,
                \\"type\\": \\"any[]\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"callback\\",
                \\"alias\\": null,
                \\"type\\": \\"(value: any, index: number) => any\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          },
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"obj\\",
                \\"alias\\": null,
                \\"type\\": \\"{ [i: string]: any; }\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"callback\\",
                \\"alias\\": null,
                \\"type\\": \\"(value: any, key: string) => any\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"constrain\\",
        \\"description\\": \\"Constrain a number between a minimum and maximum value.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"value\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"min\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"max\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"map\\",
        \\"description\\": \\"Map a value from one range to another e.g. mapping 0.5 from 0-1 to 0-10 returns 5.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"value\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"fromStart\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"fromEnd\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"toStart\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"toEnd\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"number\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"drawFocusIfNeeded\\",
        \\"description\\": \\"Draw a focus ring around the current path, or the path supplied,\\\\nif the element supplied has focus.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"element\\",
                \\"alias\\": null,
                \\"type\\": \\"Element\\",
                \\"optional\\": false
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"Canvasimo\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"isPointInPath\\",
        \\"description\\": \\"Returns whether the given point is within the current or given path.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"x\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"y\\",
                \\"alias\\": null,
                \\"type\\": \\"number\\",
                \\"optional\\": false
              },
              {
                \\"name\\": \\"fillRule\\",
                \\"alias\\": \\"'nonzero' | 'evenodd'\\",
                \\"type\\": \\"FillRule\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"boolean\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": [
          {
            \\"name\\": \\"FillRule\\",
            \\"alias\\": \\"'nonzero' | 'evenodd'\\"
          }
        ]
      },
      {
        \\"name\\": \\"isPointInStroke\\",
        \\"description\\": \\"Returns whether the given point is within the area contained by applying\\\\na stroke to the current or given path.\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [],
            \\"returns\\": {
              \\"type\\": \\"boolean\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      },
      {
        \\"name\\": \\"getVersion\\",
        \\"description\\": \\"Return the current version of Canvasimo (and log to console if logInfo parameter is true)\\",
        \\"alias\\": \\"version\\",
        \\"signatures\\": [
          {
            \\"parameters\\": [
              {
                \\"name\\": \\"logInfo\\",
                \\"alias\\": null,
                \\"type\\": \\"boolean\\",
                \\"optional\\": true
              }
            ],
            \\"returns\\": {
              \\"type\\": \\"string\\",
              \\"alias\\": null
            }
          }
        ],
        \\"typeAliases\\": []
      }
    ]
  }
]"
`;

exports[`docs index.html should match snapshot 1`] = `
"<!DOCTYPE html><html><head><meta charSet=\\"utf-8\\"/><meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1, maximum-scale=1\\"/><meta name=\\"google-site-verification\\" content=\\"v7dZv2Lwh9l9qnCqp1ZMPSKqSGV5MhSTtn7zh_Y-JkA\\"/><meta name=\\"author\\" content=\\"Jake &#x27;Sid&#x27; Smith\\"/><meta name=\\"description\\" content=\\"An HTML5 canvas drawing library, with 150+ useful methods, jQuery-like fluent interface, and cross-browser compatibility enhancements.\\"/><meta name=\\"keywords\\" content=\\"jquery,canvas,html5,drawing,fluent,api,cross-browser,compatibility,compatible,javascript,documentation,docs,canvasimo\\"/><meta name=\\"og:url\\" content=\\"http://canvasimo.com\\"/><meta name=\\"og:type\\" content=\\"website\\"/><meta name=\\"og:site_name\\" content=\\"Canvasimo\\"/><meta name=\\"og:title\\" content=\\"Canvasimo | The fluent HTML5 canvas drawing library\\"/><meta name=\\"og:description\\" content=\\"An HTML5 canvas drawing library, with 150+ useful methods, jQuery-like fluent interface, and cross-browser compatibility enhancements.\\"/><title>Canvasimo | The fluent HTML5 canvas drawing library</title><link rel=\\"stylesheet\\" href=\\"build/css/styles.css\\" media=\\"screen\\" title=\\"no title\\"/></head><body><div class=\\"wrapper\\"><span id=\\"sidebar\\"><a href=\\"#\\" class=\\"back-to-top\\"><span></span></a><div class=\\"sidebar\\"><ul class=\\"scrollable\\"><li><a href=\\"#canvas-element\\">Canvas element</a><ul><li><a href=\\"#getcanvas\\">getCanvas</a> / getElement</li><li><a href=\\"#setdensity\\">setDensity</a></li><li><a href=\\"#getdensity\\">getDensity</a></li><li><a href=\\"#setsize\\">setSize</a></li><li><a href=\\"#getsize\\">getSize</a></li><li><a href=\\"#setwidth\\">setWidth</a></li><li><a href=\\"#getwidth\\">getWidth</a></li><li><a href=\\"#setheight\\">setHeight</a></li><li><a href=\\"#getheight\\">getHeight</a></li><li><a href=\\"#getboundingclientrect\\">getBoundingClientRect</a></li></ul></li><li><a href=\\"#context\\">Context</a><ul><li><a href=\\"#getcontext\\">getContext</a></li><li><a href=\\"#getcurrentcontext\\">getCurrentContext</a></li><li><a href=\\"#getcurrentcontexttype\\">getCurrentContextType</a></li><li><a href=\\"#getcontextattributes\\">getContextAttributes</a></li></ul></li><li><a href=\\"#solid-shapes\\">Solid Shapes</a><ul><li><a href=\\"#plotrect\\">plotRect</a> / rect</li><li><a href=\\"#strokerect\\">strokeRect</a></li><li><a href=\\"#fillrect\\">fillRect</a></li><li><a href=\\"#plotroundedrect\\">plotRoundedRect</a></li><li><a href=\\"#strokeroundedrect\\">strokeRoundedRect</a></li><li><a href=\\"#fillroundedrect\\">fillRoundedRect</a></li><li><a href=\\"#plotcircle\\">plotCircle</a></li><li><a href=\\"#strokecircle\\">strokeCircle</a></li><li><a href=\\"#fillcircle\\">fillCircle</a></li><li><a href=\\"#plotpoly\\">plotPoly</a></li><li><a href=\\"#strokepoly\\">strokePoly</a></li><li><a href=\\"#fillpoly\\">fillPoly</a></li><li><a href=\\"#plotstar\\">plotStar</a></li><li><a href=\\"#strokestar\\">strokeStar</a></li><li><a href=\\"#fillstar\\">fillStar</a></li><li><a href=\\"#plotburst\\">plotBurst</a></li><li><a href=\\"#strokeburst\\">strokeBurst</a></li><li><a href=\\"#fillburst\\">fillBurst</a></li><li><a href=\\"#plotpixel\\">plotPixel</a></li><li><a href=\\"#strokepixel\\">strokePixel</a></li><li><a href=\\"#fillpixel\\">fillPixel</a></li><li><a href=\\"#plotclosedpath\\">plotClosedPath</a></li><li><a href=\\"#strokeclosedpath\\">strokeClosedPath</a></li><li><a href=\\"#fillclosedpath\\">fillClosedPath</a></li></ul></li><li><a href=\\"#open-shapes\\">Open Shapes</a><ul><li><a href=\\"#plotline\\">plotLine</a></li><li><a href=\\"#strokeline\\">strokeLine</a></li><li><a href=\\"#plotlength\\">plotLength</a></li><li><a href=\\"#strokelength\\">strokeLength</a></li><li><a href=\\"#plotpath\\">plotPath</a></li><li><a href=\\"#strokepath\\">strokePath</a></li><li><a href=\\"#fillpath\\">fillPath</a></li></ul></li><li><a href=\\"#paths\\">Paths</a><ul><li><a href=\\"#plotarc\\">plotArc</a> / arc</li><li><a href=\\"#strokearc\\">strokeArc</a></li><li><a href=\\"#fillarc\\">fillArc</a></li><li><a href=\\"#plotellipse\\">plotEllipse</a> / ellipse</li><li><a href=\\"#strokeellipse\\">strokeEllipse</a></li><li><a href=\\"#fillellipse\\">fillEllipse</a></li></ul></li><li><a href=\\"#text\\">Text</a><ul><li><a href=\\"#stroketext\\">strokeText</a></li><li><a href=\\"#filltext\\">fillText</a></li><li><a href=\\"#stroketextmultiline\\">strokeTextMultiline</a></li><li><a href=\\"#filltextmultiline\\">fillTextMultiline</a></li><li><a href=\\"#gettextsize\\">getTextSize</a> / measureText</li><li><a href=\\"#settextalign\\">setTextAlign</a></li><li><a href=\\"#gettextalign\\">getTextAlign</a></li><li><a href=\\"#settextbaseline\\">setTextBaseline</a></li><li><a href=\\"#gettextbaseline\\">getTextBaseline</a></li></ul></li><li><a href=\\"#fonts\\">Fonts</a><ul><li><a href=\\"#setfont\\">setFont</a></li><li><a href=\\"#getfont\\">getFont</a></li><li><a href=\\"#setfontfamily\\">setFontFamily</a></li><li><a href=\\"#getfontfamily\\">getFontFamily</a></li><li><a href=\\"#setfontsize\\">setFontSize</a></li><li><a href=\\"#getfontsize\\">getFontSize</a></li><li><a href=\\"#setfontstyle\\">setFontStyle</a></li><li><a href=\\"#getfontstyle\\">getFontStyle</a></li><li><a href=\\"#setfontvariant\\">setFontVariant</a></li><li><a href=\\"#getfontvariant\\">getFontVariant</a></li><li><a href=\\"#setfontweight\\">setFontWeight</a></li><li><a href=\\"#getfontweight\\">getFontWeight</a></li></ul></li><li><a href=\\"#stroke-styles\\">Stroke Styles</a><ul><li><a href=\\"#stroke\\">stroke</a></li><li><a href=\\"#setstroke\\">setStroke</a> / setStrokeStyle</li><li><a href=\\"#getstroke\\">getStroke</a> / getStrokeStyle</li><li><a href=\\"#setstrokecap\\">setStrokeCap</a> / setLineCap</li><li><a href=\\"#getstrokecap\\">getStrokeCap</a> / getLineCap</li><li><a href=\\"#setstrokedash\\">setStrokeDash</a> / setLineDash</li><li><a href=\\"#getstrokedash\\">getStrokeDash</a> / getLineDash</li><li><a href=\\"#setstrokedashoffset\\">setStrokeDashOffset</a> / setLineDashOffset</li><li><a href=\\"#getstrokedashoffset\\">getStrokeDashOffset</a> / getLineDashOffset</li><li><a href=\\"#setstrokejoin\\">setStrokeJoin</a> / setLineJoin</li><li><a href=\\"#getstrokejoin\\">getStrokeJoin</a> / getLineJoin</li><li><a href=\\"#setstrokewidth\\">setStrokeWidth</a> / setLineWidth</li><li><a href=\\"#getstrokewidth\\">getStrokeWidth</a> / getLineWidth</li><li><a href=\\"#setmiterlimit\\">setMiterLimit</a></li><li><a href=\\"#getmiterlimit\\">getMiterLimit</a></li></ul></li><li><a href=\\"#fill-styles\\">Fill styles</a><ul><li><a href=\\"#fill\\">fill</a></li><li><a href=\\"#fillcanvas\\">fillCanvas</a></li><li><a href=\\"#clearcanvas\\">clearCanvas</a></li><li><a href=\\"#clearrect\\">clearRect</a></li><li><a href=\\"#setfill\\">setFill</a> / setFillStyle</li><li><a href=\\"#getfill\\">getFill</a> / getFillStyle</li><li><a href=\\"#createlineargradient\\">createLinearGradient</a></li><li><a href=\\"#createradialgradient\\">createRadialGradient</a></li><li><a href=\\"#createpattern\\">createPattern</a></li><li><a href=\\"#drawimage\\">drawImage</a></li></ul></li><li><a href=\\"#image-data\\">Image Data</a><ul><li><a href=\\"#getdataurl\\">getDataURL</a></li><li><a href=\\"#createimagedata\\">createImageData</a></li><li><a href=\\"#getimagedata\\">getImageData</a></li><li><a href=\\"#putimagedata\\">putImageData</a></li><li><a href=\\"#getpixeldata\\">getPixelData</a></li><li><a href=\\"#getpixelcolor\\">getPixelColor</a></li></ul></li><li><a href=\\"#color-helpers\\">Color Helpers</a><ul><li><a href=\\"#createhsl\\">createHSL</a></li><li><a href=\\"#createhsla\\">createHSLA</a></li><li><a href=\\"#creatergb\\">createRGB</a></li><li><a href=\\"#creatergba\\">createRGBA</a></li><li><a href=\\"#gethslfromhsla\\">getHSLFromHSLA</a></li><li><a href=\\"#getrgbfromrgba\\">getRGBFromRGBA</a></li></ul></li><li><a href=\\"#converting-sizes\\">Converting Sizes</a><ul><li><a href=\\"#getfractionfrompercent\\">getFractionFromPercent</a></li><li><a href=\\"#getpercentfromfraction\\">getPercentFromFraction</a></li><li><a href=\\"#getfractionofwidth\\">getFractionOfWidth</a></li><li><a href=\\"#getfractionofheight\\">getFractionOfHeight</a></li><li><a href=\\"#getpercentofwidth\\">getPercentOfWidth</a></li><li><a href=\\"#getpercentofheight\\">getPercentOfHeight</a></li><li><a href=\\"#getdistance\\">getDistance</a></li></ul></li><li><a href=\\"#converting-angles\\">Converting Angles</a><ul><li><a href=\\"#getradiansfromdegrees\\">getRadiansFromDegrees</a></li><li><a href=\\"#getdegreesfromradians\\">getDegreesFromRadians</a></li><li><a href=\\"#getangle\\">getAngle</a></li></ul></li><li><a href=\\"#path-plotting\\">Path Plotting</a><ul><li><a href=\\"#beginpath\\">beginPath</a></li><li><a href=\\"#closepath\\">closePath</a></li><li><a href=\\"#moveto\\">moveTo</a></li><li><a href=\\"#lineto\\">lineTo</a></li><li><a href=\\"#arcto\\">arcTo</a></li><li><a href=\\"#beziercurveto\\">bezierCurveTo</a></li><li><a href=\\"#quadraticcurveto\\">quadraticCurveTo</a></li></ul></li><li><a href=\\"#canvas-state\\">Canvas State</a><ul><li><a href=\\"#save\\">save</a></li><li><a href=\\"#restore\\">restore</a></li><li><a href=\\"#rotate\\">rotate</a></li><li><a href=\\"#scale\\">scale</a></li><li><a href=\\"#translate\\">translate</a></li><li><a href=\\"#transform\\">transform</a></li><li><a href=\\"#settransform\\">setTransform</a></li><li><a href=\\"#resettransform\\">resetTransform</a></li><li><a href=\\"#clip\\">clip</a></li><li><a href=\\"#setopacity\\">setOpacity</a> / setGlobalAlpha</li><li><a href=\\"#getopacity\\">getOpacity</a> / getGlobalAlpha</li><li><a href=\\"#setcompositeoperation\\">setCompositeOperation</a> / setGlobalCompositeOperation</li><li><a href=\\"#getcompositeoperation\\">getCompositeOperation</a> / getGlobalCompositeOperation</li><li><a href=\\"#setimagesmoothingenabled\\">setImageSmoothingEnabled</a></li><li><a href=\\"#getimagesmoothingenabled\\">getImageSmoothingEnabled</a></li><li><a href=\\"#setshadowblur\\">setShadowBlur</a></li><li><a href=\\"#getshadowblur\\">getShadowBlur</a></li><li><a href=\\"#setshadowcolor\\">setShadowColor</a></li><li><a href=\\"#getshadowcolor\\">getShadowColor</a></li><li><a href=\\"#setshadowoffsetx\\">setShadowOffsetX</a></li><li><a href=\\"#getshadowoffsetx\\">getShadowOffsetX</a></li><li><a href=\\"#setshadowoffsety\\">setShadowOffsetY</a></li><li><a href=\\"#getshadowoffsety\\">getShadowOffsetY</a></li></ul></li><li><a href=\\"#misc\\">Misc</a><ul><li><a href=\\"#tap\\">tap</a></li><li><a href=\\"#repeat\\">repeat</a></li><li><a href=\\"#foreach\\">forEach</a></li><li><a href=\\"#constrain\\">constrain</a></li><li><a href=\\"#map\\">map</a></li><li><a href=\\"#drawfocusifneeded\\">drawFocusIfNeeded</a></li><li><a href=\\"#ispointinpath\\">isPointInPath</a></li><li><a href=\\"#ispointinstroke\\">isPointInStroke</a></li><li><a href=\\"#getversion\\">getVersion</a> / version</li></ul></li></ul></div></span><div class=\\"container\\"><div class=\\"doc-container\\"><h1 class=\\"main-header\\"><a href=\\"#\\">Canvasimo</a><span class=\\"version\\">(Version: 0.6.5)</span></h1><p><strong>An HTML5 canvas drawing library, with 150+ useful methods, jQuery-like fluent interface, and cross-browser compatibility enhancements to make your life easier. Includes methods for drawing shapes not supported by the standard canvas API, loops, intuitive font control, and a host of helper methods for creating colors, calculating distances, converting angles, and much more.</strong></p><p class=\\"badges\\"><a class=\\"badge circleci\\" href=\\"https://circleci.com/gh/JakeSidSmith/canvasimo\\" target=\\"_blank\\"><img src=\\"https://circleci.com/gh/JakeSidSmith/canvasimo.svg?style=svg\\" alt=\\"Circle CI Status Badge\\"/></a><a class=\\"badge npm\\" href=\\"https://www.npmjs.com/package/canvasimo\\" target=\\"_blank\\">NPM</a><a class=\\"badge github\\" href=\\"https://github.com/jakesidsmith/canvasimo\\" target=\\"_blank\\">GitHub</a><a class=\\"badge github\\" href=\\"https://github.com/jakesidsmith/canvasimo/issues\\" target=\\"_blank\\">Issues</a></p><h2 id=\\"demo\\"><a href=\\"#demo\\">Demo</a></h2><div class=\\"demo-container\\"><canvas id=\\"demo-1\\" width=\\"400\\" height=\\"200\\">Looks like this browser doesn&#x27;t support the canvas element, or you have javascript disabled.</canvas></div><noscript>You must have javascript enabled for this demo.</noscript><h2 id=\\"features\\"><a href=\\"#features\\">Features</a></h2><ul><li>Fluent interface</li><li>Idiomatic method names</li><li>Alias original canvas methods</li><li>Improved browser compatibility</li><li>Additional drawing methods</li><li>Useful helper functions</li></ul><h2 id=\\"about\\"><a href=\\"#about\\">About</a></h2><p>Canvasimo (canvas in my opinion) started off as a simple concept - create wrappers for the standard canvas API to create a fluent interface, and allow access to canvas attributes with getters and setters.</p><p>This quickly evolved into a project that not only wrapped the existing canvas API, but added some additional methods (e.g. for creating rounded rectangles), and ensured that experimental features (such as reset transform and ellipse) worked in all browsers.</p><p>Along the way, I realised that a lot of the canvas attributes &amp; methods were not very idiomatic, and so I came up with some more suitable method / attribute names.</p><p>For example, shape drawing is broken into 3 types: <code>plotShape</code>, <code>fillShape</code>, and <code>strokeShape</code>. You&#x27;ll find these 3 methods for almost every shape, e.g. <code>plotRect</code>, <code>fillRect</code> and <code>strokeRect</code>. All the original methods are still available as aliases, e.g. <code>rect</code>.</p><p>Similarly attributes regarding lines and strokes had a mixed set of names, so to simplify this, any style related attributes are referred to as stroke, and line is now a shape. For example, where you previously had <code>strokeStyle</code> and <code>lineWidth</code>, you now have <code>stroke</code> and <code>strokeWidth</code>, both of which are available through getters and setters; <code>setStroke</code>, <code>setStrokeWidth</code>. You can, however, still use their aliases; <code>setStrokeStyle</code>, <code>setLineWidth</code>.</p><p>Additionally, any methods that previously relied on setting the stroke or fill color before-hand, can now optionally have a color passed as their final argument, e.g. <code>fillRect(0, 0, 10, 10, &#x27;black&#x27;)</code>, <code>strokeLine(0, 0, 0, 20, &#x27;red&#x27;)</code>. And similarly, the fill and stroke methods can now be passed a color; <code>fill(&#x27;red&#x27;)</code>, <code>stroke(&#x27;green&#x27;)</code>, <code>fillCanvas(&#x27;blue&#x27;)</code>.</p><h2 id=\\"examples\\"><a href=\\"#examples\\">Examples</a></h2><h3 id=\\"basic-shapes\\"><a href=\\"#basic-shapes\\">Basic shapes</a></h3><div class=\\"demo-container\\"><canvas id=\\"example-basic-shapes\\" width=\\"400\\" height=\\"200\\">Looks like this browser doesn&#x27;t support the canvas element, or you have javascript disabled.</canvas></div><noscript>You must have javascript enabled for this example.</noscript><pre>import Canvasimo from &#x27;canvasimo&#x27;;

const element = document.getElementById(&#x27;example-basic-shapes&#x27;);

if (!element) {
  throw new Error(&#x27;Could not find canvas element for basic shapes example&#x27;);
}

const canvas = new Canvasimo(element as HTMLCanvasElement);
const rect = canvas.getBoundingClientRect();

const randoms = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(() =&gt; Math.random());

canvas
  .setDensity(2)
  .setSize(rect.width, rect.height);

const draw = () =&gt; {
  const { width } = canvas.getBoundingClientRect();
  const height = canvas.getHeight();

  canvas
    .clearCanvas()
    .setSize(width, height)
    .fillCanvas(&#x27;#EEEEEE&#x27;)
    .save()
    .translate(width / 2, height / 2)
    .rotate(canvas.getRadiansFromDegrees(-90))
    .setOpacity(0.25)
    .fillStar(0, 0, 50, 5, false, &#x27;red&#x27;)
    .restore()
    .strokeCircle(width * 0.25, height / 2, 30, false, &#x27;black&#x27;)
    .strokeBurst(width * 0.25, height / 2, 40, 50, 8, false, &#x27;black&#x27;)
    .strokeRoundedRect(width * 0.75 - 20, height / 2 - 20, 40, 40, 10, &#x27;black&#x27;)
    .repeat(10, (index) =&gt; {
      const y = canvas.map(index, 0, 10, 0, height) + height / 10 / 2;

      canvas
        .beginPath()
        .strokeLine(10, y, width - 10, y, &#x27;green&#x27;);
    })
    .tap(() =&gt; {
      const path = randoms.map((value, index) =&gt; ({
        x: canvas.getFractionOfWidth(1 / (randoms.length - 1)) * index,
        y: canvas.map(value, 0, 1, 0, height),
      }));

      canvas
        .beginPath()
        .setStrokeWidth(2)
        .strokePath(path, &#x27;blue&#x27;);
    });
};

draw();

window.addEventListener(&#x27;resize&#x27;, draw);
</pre><h3 id=\\"multiline-text\\"><a href=\\"#multiline-text\\">Multiline text</a></h3><div class=\\"demo-container\\"><canvas id=\\"example-multiline-text\\" width=\\"400\\" height=\\"200\\">Looks like this browser doesn&#x27;t support the canvas element, or you have javascript disabled.</canvas></div><noscript>You must have javascript enabled for this example.</noscript><pre>import Canvasimo from &#x27;canvasimo&#x27;;

const element = document.getElementById(&#x27;example-multiline-text&#x27;);

if (!element) {
  throw new Error(&#x27;Could not find canvas element for multiline text example&#x27;);
}

const MARGIN = 10;
const FONT_SIZE = 14;
const canvas = new Canvasimo(element as HTMLCanvasElement);
const rect = canvas.getBoundingClientRect();

canvas
  .setDensity(2)
  .setSize(rect.width, rect.height);

const draw = () =&gt; {
  const { width } = canvas.getBoundingClientRect();
  const height = canvas.getHeight();

  const multilineTextArea = Math.min(width / 3 * 2, 400);
  const multilineTextOffset = (width - multilineTextArea) / 2;
  const multilineTextWidth = (multilineTextArea - MARGIN * 6) / 3;

  canvas
    .clearCanvas()
    .setSize(width, height)
    .fillCanvas(&#x27;#FFFFFF&#x27;)
    .setTextBaseline(&#x27;top&#x27;)
    .setFontFamily(&#x27;arial&#x27;)
    .setFontSize(FONT_SIZE)
    .fillText(
      &#x27;Regular text that does not have newlines or automatic wrapping&#x27;,
      MARGIN,
      MARGIN,
      null,
      &#x27;black&#x27;
    )
    .fillTextMultiline(
      &#x27;Text with newline after this...\\\\n...so this is on a newline&#x27;,
      MARGIN,
      FONT_SIZE * 2
    )
    .setTextAlign(&#x27;center&#x27;)
    .setFontSize(FONT_SIZE - 2)
    .fillTextMultiline(
      &#x27;Try resizing the window! :D&#x27;,
      width / 2,
      FONT_SIZE * 4,
      width - MARGIN * 2,
      undefined,
      undefined,
      &#x27;#555555&#x27;
    )
    .setFontSize(FONT_SIZE)
    .setFill(&#x27;black&#x27;)
    .translate(multilineTextOffset, 0)
    .strokeLine(0, 0, 0, height, &#x27;#AAAAAA&#x27;)
    .setTextAlign(&#x27;left&#x27;)
    .fillTextMultiline(
      &#x27;normal\\\\nText that automatically wraps but never breaks words&#x27;,
      MARGIN,
      MARGIN + FONT_SIZE * 5,
      multilineTextWidth,
      &#x27;normal&#x27;
    )
    .translate(MARGIN * 2 + multilineTextWidth, 0)
    .strokeLine(0, 0, 0, height, &#x27;#AAAAAA&#x27;)
    .setTextAlign(&#x27;center&#x27;)
    .fillTextMultiline(
      &#x27;break-word\\\\nText that automatically wraps and breaks words if necessary&#x27;,
      MARGIN + multilineTextWidth / 2,
      MARGIN + FONT_SIZE * 5,
      multilineTextWidth,
      &#x27;break-word&#x27;
    )
    .translate(MARGIN * 2 + multilineTextWidth, 0)
    .strokeLine(0, 0, 0, height, &#x27;#AAAAAA&#x27;)
    .setTextAlign(&#x27;right&#x27;)
    .fillTextMultiline(
      &#x27;break-all\\\\nText that automatically wraps and always breaks words&#x27;,
      MARGIN + multilineTextWidth,
      MARGIN + FONT_SIZE * 5,
      multilineTextWidth,
      &#x27;break-all&#x27;
    )
    .translate(MARGIN * 2 + multilineTextWidth, 0)
    .strokeLine(0, 0, 0, height, &#x27;#AAAAAA&#x27;);
};

draw();

window.addEventListener(&#x27;resize&#x27;, draw);
</pre><h1 class=\\"main-header\\" id=\\"documentation\\"><a href=\\"#documentation\\">Documentation</a></h1><div class=\\"group\\"><h2 class=\\"group-header\\" id=\\"canvas-element\\"><a href=\\"#canvas-element\\">Canvas element</a></h2><p>A collection of methods for getting and setting various properties of the canvas element.</p><div class=\\"method\\"><h3 id=\\"getcanvas\\"><a href=\\"#getcanvas\\">getCanvas</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">getElement</strong></span></h3><p>Get the canvas element.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getCanvas</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">HTMLCanvasElement</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"setdensity\\"><a href=\\"#setdensity\\">setDensity</a></h3><p>Set the canvas pixel density.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setDensity</span><span>(</span><span><span class=\\"code-argument\\">density</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getdensity\\"><a href=\\"#getdensity\\">getDensity</a></h3><p>Get the canvas pixel density.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getDensity</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"setsize\\"><a href=\\"#setsize\\">setSize</a></h3><p>Set the canvas dimensions.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setSize</span><span>(</span><span><span class=\\"code-argument\\">size</span>: <span class=\\"code-type\\">Size</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setSize</span><span>(</span><span><span class=\\"code-argument\\">width</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">height</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">Size</span> = <span class=\\"code-type\\">{
  width: number;
  height: number;
}</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"getsize\\"><a href=\\"#getsize\\">getSize</a></h3><p>Get the canvas dimensions.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getSize</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">Size</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">Size</span> = <span class=\\"code-type\\">{
  width: number;
  height: number;
}</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"setwidth\\"><a href=\\"#setwidth\\">setWidth</a></h3><p>Set the canvas width.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setWidth</span><span>(</span><span><span class=\\"code-argument\\">width</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getwidth\\"><a href=\\"#getwidth\\">getWidth</a></h3><p>Get the canvas width.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getWidth</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"setheight\\"><a href=\\"#setheight\\">setHeight</a></h3><p>Set the canvas height.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setHeight</span><span>(</span><span><span class=\\"code-argument\\">height</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getheight\\"><a href=\\"#getheight\\">getHeight</a></h3><p>Get the canvas height.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getHeight</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getboundingclientrect\\"><a href=\\"#getboundingclientrect\\">getBoundingClientRect</a></h3><p>Get the canvas size &amp; position on screen.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getBoundingClientRect</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">ClientRect</span>;</span></div></pre></div></div><div class=\\"group\\"><h2 class=\\"group-header\\" id=\\"context\\"><a href=\\"#context\\">Context</a></h2><p>&#x27;A collection of methods for retrieving a canvas context or information about the context.</p><div class=\\"method\\"><h3 id=\\"getcontext\\"><a href=\\"#getcontext\\">getContext</a></h3><p>Get the standard canvas context (used for drawing).</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getContext</span><span>(</span><span><span class=\\"code-argument\\">type</span>: <span class=\\"code-type\\">string</span><span>, </span></span><span><span class=\\"code-argument\\">contextAttributes</span>?: <span class=\\"code-type\\">CanvasContextAttributes</span></span><span>) =&gt; <span class=\\"code-type\\">CanvasContext</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">CanvasContextAttributes</span> = <span class=\\"code-type\\">Canvas2DContextAttributes | WebGLContextAttributes</span>;</div><div>type <span class=\\"code-type\\">CanvasContext</span> = <span class=\\"code-type\\">CanvasRenderingContext2D | WebGLRenderingContext | null</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"getcurrentcontext\\"><a href=\\"#getcurrentcontext\\">getCurrentContext</a></h3><p>Get canvas context used by Canvasimo (2d).</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getCurrentContext</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">CanvasRenderingContext2D</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getcurrentcontexttype\\"><a href=\\"#getcurrentcontexttype\\">getCurrentContextType</a></h3><p>Get the context type used by Canvasimo (&#x27;2d&#x27;, &#x27;webgl&#x27;, etc).</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getCurrentContextType</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">&quot;2d&quot;</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getcontextattributes\\"><a href=\\"#getcontextattributes\\">getContextAttributes</a></h3><p>Get the context attributes used.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getContextAttributes</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">CanvasContextAttributes</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">CanvasContextAttributes</span> = <span class=\\"code-type\\">Canvas2DContextAttributes | WebGLContextAttributes</span>;</div></pre></div></div><div class=\\"group\\"><h2 class=\\"group-header\\" id=\\"solid-shapes\\"><a href=\\"#solid-shapes\\">Solid Shapes</a></h2><p>A collection of methods for plotting or drawing solid shapes -
those that create a new shape when invoked, and are self closing.</p><div class=\\"method\\"><h3 id=\\"plotrect\\"><a href=\\"#plotrect\\">plotRect</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">rect</strong></span></h3><p>Plot a rectangle that can then have a fill or stroke applied to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">plotRect</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">width</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">height</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"strokerect\\"><a href=\\"#strokerect\\">strokeRect</a></h3><p>Plot a rectangle and apply a stroke to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">strokeRect</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">width</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">height</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"fillrect\\"><a href=\\"#fillrect\\">fillRect</a></h3><p>Plot a rectangle and apply a fill to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">fillRect</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">width</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">height</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"plotroundedrect\\"><a href=\\"#plotroundedrect\\">plotRoundedRect</a></h3><p>Plot a rounded rectangle that can then have a fill or stroke applied to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">plotRoundedRect</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">width</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">height</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radius</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"strokeroundedrect\\"><a href=\\"#strokeroundedrect\\">strokeRoundedRect</a></h3><p>Plot a rounded rectangle and apply a stroke to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">strokeRoundedRect</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">width</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">height</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radius</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"fillroundedrect\\"><a href=\\"#fillroundedrect\\">fillRoundedRect</a></h3><p>Plot a rounded rectangle and apply a fill to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">fillRoundedRect</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">width</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">height</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radius</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"plotcircle\\"><a href=\\"#plotcircle\\">plotCircle</a></h3><p>Plot a circle that can then have a stroke or fill applied to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">plotCircle</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radius</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">anticlockwise</span>?: <span class=\\"code-type\\">boolean</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"strokecircle\\"><a href=\\"#strokecircle\\">strokeCircle</a></h3><p>Plot a circle and apply a stroke to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">strokeCircle</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radius</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">anticlockwise</span>?: <span class=\\"code-type\\">boolean</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"fillcircle\\"><a href=\\"#fillcircle\\">fillCircle</a></h3><p>Plot a circle and apply a fill to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">fillCircle</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radius</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">anticlockwise</span>?: <span class=\\"code-type\\">boolean</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"plotpoly\\"><a href=\\"#plotpoly\\">plotPoly</a></h3><p>Plot a polygon that can then have a stroke or fill applied to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">plotPoly</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radius</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">sides</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">anticlockwise</span>?: <span class=\\"code-type\\">boolean</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"strokepoly\\"><a href=\\"#strokepoly\\">strokePoly</a></h3><p>Plot a polygon and apply a stoke to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">strokePoly</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radius</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">sides</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">anticlockwise</span>?: <span class=\\"code-type\\">boolean</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"fillpoly\\"><a href=\\"#fillpoly\\">fillPoly</a></h3><p>Plot a polygon and apply a fill to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">fillPoly</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radius</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">sides</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">anticlockwise</span>?: <span class=\\"code-type\\">boolean</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"plotstar\\"><a href=\\"#plotstar\\">plotStar</a></h3><p>Plot a star that can then have a stroke or fill applied to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">plotStar</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radius1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">sides</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">anticlockwise</span>?: <span class=\\"code-type\\">boolean</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"strokestar\\"><a href=\\"#strokestar\\">strokeStar</a></h3><p>Plot a star and apply a stoke to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">strokeStar</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radius1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">sides</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">anticlockwise</span>?: <span class=\\"code-type\\">boolean</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"fillstar\\"><a href=\\"#fillstar\\">fillStar</a></h3><p>Plot a star and apply a fill to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">fillStar</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radius1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">sides</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">anticlockwise</span>?: <span class=\\"code-type\\">boolean</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"plotburst\\"><a href=\\"#plotburst\\">plotBurst</a></h3><p>Plot a burst that can then have a stroke or fill applied to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">plotBurst</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radius1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radius2</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">sides</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">anticlockwise</span>?: <span class=\\"code-type\\">boolean</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"strokeburst\\"><a href=\\"#strokeburst\\">strokeBurst</a></h3><p>Plot a burst and apply a stoke to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">strokeBurst</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radius1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radius2</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">sides</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">anticlockwise</span>?: <span class=\\"code-type\\">boolean</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"fillburst\\"><a href=\\"#fillburst\\">fillBurst</a></h3><p>Plot a burst and apply a fill to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">fillBurst</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radius1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radius2</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">sides</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">anticlockwise</span>?: <span class=\\"code-type\\">boolean</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"plotpixel\\"><a href=\\"#plotpixel\\">plotPixel</a></h3><p>Plot a single pixel that can then have a stroke or fill applied to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">plotPixel</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"strokepixel\\"><a href=\\"#strokepixel\\">strokePixel</a></h3><p>Plot a single pixel and apply a stroke to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">strokePixel</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"fillpixel\\"><a href=\\"#fillpixel\\">fillPixel</a></h3><p>Plot a single pixel and apply a fill to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">fillPixel</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"plotclosedpath\\"><a href=\\"#plotclosedpath\\">plotClosedPath</a></h3><p>Plot a closed path that can then have a stroke or fill applied to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">plotClosedPath</span><span>(</span><span><span class=\\"code-argument\\">points</span>: <span class=\\"code-type\\">Points</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">Points</span> = <span class=\\"code-type\\">Array&lt;{x: number, y: number}&gt; | Array&lt;[number, number]&gt; | number[]</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"strokeclosedpath\\"><a href=\\"#strokeclosedpath\\">strokeClosedPath</a></h3><p>Plot a closed path and apply a stroke to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">strokeClosedPath</span><span>(</span><span><span class=\\"code-argument\\">points</span>: <span class=\\"code-type\\">Points</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">Points</span> = <span class=\\"code-type\\">Array&lt;{x: number, y: number}&gt; | Array&lt;[number, number]&gt; | number[]</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"fillclosedpath\\"><a href=\\"#fillclosedpath\\">fillClosedPath</a></h3><p>Plot a closed path and apply a fill to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">fillClosedPath</span><span>(</span><span><span class=\\"code-argument\\">points</span>: <span class=\\"code-type\\">Points</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">Points</span> = <span class=\\"code-type\\">Array&lt;{x: number, y: number}&gt; | Array&lt;[number, number]&gt; | number[]</span>;</div></pre></div></div><div class=\\"group\\"><h2 class=\\"group-header\\" id=\\"open-shapes\\"><a href=\\"#open-shapes\\">Open Shapes</a></h2><p>A collection of methods for plotting or drawing open shapes -
those that create a new shape when invoked, but are not self closing.</p><div class=\\"method\\"><h3 id=\\"plotline\\"><a href=\\"#plotline\\">plotLine</a></h3><p>Plot a line that can then have a stroke or fill applied to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">plotLine</span><span>(</span><span><span class=\\"code-argument\\">x1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">x2</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y2</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"strokeline\\"><a href=\\"#strokeline\\">strokeLine</a></h3><p>Plot a line and apply a stroke to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">strokeLine</span><span>(</span><span><span class=\\"code-argument\\">x1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">x2</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y2</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"plotlength\\"><a href=\\"#plotlength\\">plotLength</a></h3><p>Plot a line, by length &amp; angle, that can then have a stroke or fill applied to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">plotLength</span><span>(</span><span><span class=\\"code-argument\\">x1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">length</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">angle</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"strokelength\\"><a href=\\"#strokelength\\">strokeLength</a></h3><p>Plot a line, by length &amp; angle, and apply a stroke to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">strokeLength</span><span>(</span><span><span class=\\"code-argument\\">x1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">length</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">angle</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"plotpath\\"><a href=\\"#plotpath\\">plotPath</a></h3><p>Plot a path, that is not self closing, that can have a stroke or fill applied to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">plotPath</span><span>(</span><span><span class=\\"code-argument\\">points</span>: <span class=\\"code-type\\">Points</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">Points</span> = <span class=\\"code-type\\">Array&lt;{x: number, y: number}&gt; | Array&lt;[number, number]&gt; | number[]</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"strokepath\\"><a href=\\"#strokepath\\">strokePath</a></h3><p>Plot a path, that is not self closing, and apply a stroke to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">strokePath</span><span>(</span><span><span class=\\"code-argument\\">points</span>: <span class=\\"code-type\\">Points</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">Points</span> = <span class=\\"code-type\\">Array&lt;{x: number, y: number}&gt; | Array&lt;[number, number]&gt; | number[]</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"fillpath\\"><a href=\\"#fillpath\\">fillPath</a></h3><p>Plot a path, that is not self closing, and apply a fill to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">fillPath</span><span>(</span><span><span class=\\"code-argument\\">points</span>: <span class=\\"code-type\\">Points</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">Points</span> = <span class=\\"code-type\\">Array&lt;{x: number, y: number}&gt; | Array&lt;[number, number]&gt; | number[]</span>;</div></pre></div></div><div class=\\"group\\"><h2 class=\\"group-header\\" id=\\"paths\\"><a href=\\"#paths\\">Paths</a></h2><p>A collection of methods for plotting or drawing paths -
shapes that can be connected to create more complex shapes.</p><div class=\\"method\\"><h3 id=\\"plotarc\\"><a href=\\"#plotarc\\">plotArc</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">arc</strong></span></h3><p>Plot an arc that can have a stroke or fill applied to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">plotArc</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radius</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">startAngle</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">endAngle</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">anticlockwise</span>?: <span class=\\"code-type\\">boolean</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"strokearc\\"><a href=\\"#strokearc\\">strokeArc</a></h3><p>Plot an arc and apply a stroke to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">strokeArc</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radius</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">startAngle</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">endAngle</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">anticlockwise</span>?: <span class=\\"code-type\\">boolean</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"fillarc\\"><a href=\\"#fillarc\\">fillArc</a></h3><p>Plot an arc and apply a fill to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">fillArc</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radius</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">startAngle</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">endAngle</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">anticlockwise</span>?: <span class=\\"code-type\\">boolean</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"plotellipse\\"><a href=\\"#plotellipse\\">plotEllipse</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">ellipse</strong></span></h3><p>Plot an ellipse that can then have a stroke or fill applied to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">plotEllipse</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radiusX</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radiusY</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">rotation</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">startAngle</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">endAngle</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">anticlockwise</span>?: <span class=\\"code-type\\">boolean</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"strokeellipse\\"><a href=\\"#strokeellipse\\">strokeEllipse</a></h3><p>Plot an ellipse and apply a stroke to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">strokeEllipse</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radiusX</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radiusY</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">rotation</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">startAngle</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">endAngle</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">anticlockwise</span>?: <span class=\\"code-type\\">boolean</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"fillellipse\\"><a href=\\"#fillellipse\\">fillEllipse</a></h3><p>Plot an ellipse and apply a fill to it.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">fillEllipse</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radiusX</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radiusY</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">rotation</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">startAngle</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">endAngle</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">anticlockwise</span>?: <span class=\\"code-type\\">boolean</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div></div><div class=\\"group\\"><h2 class=\\"group-header\\" id=\\"text\\"><a href=\\"#text\\">Text</a></h2><p>A collection of methods for drawing text,
and getting and setting properties related to text rendering.</p><div class=\\"method\\"><h3 id=\\"stroketext\\"><a href=\\"#stroketext\\">strokeText</a></h3><p>Draw a text with a stroke.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">strokeText</span><span>(</span><span><span class=\\"code-argument\\">text</span>: <span class=\\"code-type\\">string</span><span>, </span></span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">maxWidth</span>?: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"filltext\\"><a href=\\"#filltext\\">fillText</a></h3><p>Draw a text with a fill.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">fillText</span><span>(</span><span><span class=\\"code-argument\\">text</span>: <span class=\\"code-type\\">string</span><span>, </span></span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">maxWidth</span>?: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"stroketextmultiline\\"><a href=\\"#stroketextmultiline\\">strokeTextMultiline</a></h3><p>Draw text with a stroke, wrapped at newlines and automatically wrapped if the text exceeds the maxWidth.
If no maxWidth is specified text will only wrap at newlines (wordBreak is ignore).
Words will not break by default (normal) and therefore may overflow.
break-all will break words wherever possible, and break-word will only break words if there is not enough room.
The lineHeight parameter is a multiplier for the font size, and defaults to 1.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">strokeTextMultiline</span><span>(</span><span><span class=\\"code-argument\\">text</span>: <span class=\\"code-type\\">string</span><span>, </span></span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">maxWidth</span>?: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">wordBreak</span>?: <span class=\\"code-type\\">WordBreak</span><span>, </span></span><span><span class=\\"code-argument\\">lineHeight</span>?: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">WordBreak</span> = <span class=\\"code-type\\">&#x27;normal&#x27; | &#x27;break-word&#x27; | &#x27;break-all&#x27;</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"filltextmultiline\\"><a href=\\"#filltextmultiline\\">fillTextMultiline</a></h3><p>Draw text with a fill, wrapped at newlines and automatically wrapped if the text exceeds the maxWidth.
If no maxWidth is specified text will only wrap at newlines (wordBreak is ignore).
Words will not break by default (normal) and therefore may overflow.
break-all will break words wherever possible, and break-word will only break words if there is not enough room.
The lineHeight parameter is a multiplier for the font size, and defaults to 1.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">fillTextMultiline</span><span>(</span><span><span class=\\"code-argument\\">text</span>: <span class=\\"code-type\\">string</span><span>, </span></span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">maxWidth</span>?: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">wordBreak</span>?: <span class=\\"code-type\\">WordBreak</span><span>, </span></span><span><span class=\\"code-argument\\">lineHeight</span>?: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">WordBreak</span> = <span class=\\"code-type\\">&#x27;normal&#x27; | &#x27;break-word&#x27; | &#x27;break-all&#x27;</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"gettextsize\\"><a href=\\"#gettextsize\\">getTextSize</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">measureText</strong></span></h3><p>Get information about the size text will be drawn.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getTextSize</span><span>(</span><span><span class=\\"code-argument\\">text</span>: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">TextMetrics</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"settextalign\\"><a href=\\"#settextalign\\">setTextAlign</a></h3><p>Set the horizontal text alignment.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setTextAlign</span><span>(</span><span><span class=\\"code-argument\\">value</span>: <span class=\\"code-type\\">TextAlign</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">TextAlign</span> = <span class=\\"code-type\\">&#x27;left&#x27; | &#x27;right&#x27; | &#x27;center&#x27; | &#x27;start&#x27; | &#x27;end&#x27;</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"gettextalign\\"><a href=\\"#gettextalign\\">getTextAlign</a></h3><p>Get the horizontal text alignment.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getTextAlign</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">TextAlign</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">TextAlign</span> = <span class=\\"code-type\\">&#x27;left&#x27; | &#x27;right&#x27; | &#x27;center&#x27; | &#x27;start&#x27; | &#x27;end&#x27;</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"settextbaseline\\"><a href=\\"#settextbaseline\\">setTextBaseline</a></h3><p>Set the vertical text alignment.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setTextBaseline</span><span>(</span><span><span class=\\"code-argument\\">value</span>: <span class=\\"code-type\\">TextBaseline</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">TextBaseline</span> = <span class=\\"code-type\\">&#x27;top&#x27; | &#x27;hanging&#x27; | &#x27;middle&#x27; | &#x27;alphabetic&#x27; | &#x27;ideographic&#x27; | &#x27;bottom&#x27;</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"gettextbaseline\\"><a href=\\"#gettextbaseline\\">getTextBaseline</a></h3><p>Get the vertical text alignment.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getTextBaseline</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">TextBaseline</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">TextBaseline</span> = <span class=\\"code-type\\">&#x27;top&#x27; | &#x27;hanging&#x27; | &#x27;middle&#x27; | &#x27;alphabetic&#x27; | &#x27;ideographic&#x27; | &#x27;bottom&#x27;</span>;</div></pre></div></div><div class=\\"group\\"><h2 class=\\"group-header\\" id=\\"fonts\\"><a href=\\"#fonts\\">Fonts</a></h2><p>A collection of methods for getting and setting font styles and variations.</p><div class=\\"method\\"><h3 id=\\"setfont\\"><a href=\\"#setfont\\">setFont</a></h3><p>Set the font to use.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setFont</span><span>(</span><span><span class=\\"code-argument\\">font</span>: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getfont\\"><a href=\\"#getfont\\">getFont</a></h3><p>Get the font that is being used.
This returns the exact CanvasRenderingContext2D.font string.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getFont</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">string</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"setfontfamily\\"><a href=\\"#setfontfamily\\">setFontFamily</a></h3><p>Set the font family to use.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setFontFamily</span><span>(</span><span><span class=\\"code-argument\\">family</span>: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getfontfamily\\"><a href=\\"#getfontfamily\\">getFontFamily</a></h3><p>Get the font that is being used.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getFontFamily</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">string</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"setfontsize\\"><a href=\\"#setfontsize\\">setFontSize</a></h3><p>Set the font size to use.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setFontSize</span><span>(</span><span><span class=\\"code-argument\\">size</span>: <span class=\\"code-type\\">string | number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getfontsize\\"><a href=\\"#getfontsize\\">getFontSize</a></h3><p>Get the font size that is being used.
Returns null if using a special font e.g. caption, icon, menu.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getFontSize</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"setfontstyle\\"><a href=\\"#setfontstyle\\">setFontStyle</a></h3><p>Set the font style to use.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setFontStyle</span><span>(</span><span><span class=\\"code-argument\\">style</span>: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getfontstyle\\"><a href=\\"#getfontstyle\\">getFontStyle</a></h3><p>Get the font style that is being used.
Returns null if using a special font e.g. caption, icon, menu.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getFontStyle</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">string</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"setfontvariant\\"><a href=\\"#setfontvariant\\">setFontVariant</a></h3><p>Set the font variant to use.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setFontVariant</span><span>(</span><span><span class=\\"code-argument\\">variant</span>: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getfontvariant\\"><a href=\\"#getfontvariant\\">getFontVariant</a></h3><p>Get the font variant that is being used.
Returns null if using a special font e.g. caption, icon, menu.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getFontVariant</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">string</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"setfontweight\\"><a href=\\"#setfontweight\\">setFontWeight</a></h3><p>Set the font weight to use.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setFontWeight</span><span>(</span><span><span class=\\"code-argument\\">weight</span>: <span class=\\"code-type\\">string | number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getfontweight\\"><a href=\\"#getfontweight\\">getFontWeight</a></h3><p>Get the font weight that is being used.
Returns null if using a special font e.g. caption, icon, menu.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getFontWeight</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">string | number</span>;</span></div></pre></div></div><div class=\\"group\\"><h2 class=\\"group-header\\" id=\\"stroke-styles\\"><a href=\\"#stroke-styles\\">Stroke Styles</a></h2><p>A collection of methods for getting and setting stroke styles,
and applying strokes to existing shapes.</p><div class=\\"method\\"><h3 id=\\"stroke\\"><a href=\\"#stroke\\">stroke</a></h3><p>Apply a stroke to the current shape.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">stroke</span><span>(</span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">stroke</span><span>(</span><span><span class=\\"code-argument\\">path</span>?: <span class=\\"code-type\\">Path2D</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">stroke</span><span>(</span><span><span class=\\"code-argument\\">color</span>: <span class=\\"code-type\\">string</span><span>, </span></span><span><span class=\\"code-argument\\">path</span>: <span class=\\"code-type\\">Path2D</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"setstroke\\"><a href=\\"#setstroke\\">setStroke</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">setStrokeStyle</strong></span></h3><p>Set the stroke style to use.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setStroke</span><span>(</span><span><span class=\\"code-argument\\">value</span>: <span class=\\"code-type\\">FillOrStrokeStyle</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">FillOrStrokeStyle</span> = <span class=\\"code-type\\">string | CanvasGradient | CanvasPattern</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"getstroke\\"><a href=\\"#getstroke\\">getStroke</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">getStrokeStyle</strong></span></h3><p>Get the stroke style that is being used.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getStroke</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">FillOrStrokeStyle</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">FillOrStrokeStyle</span> = <span class=\\"code-type\\">string | CanvasGradient | CanvasPattern</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"setstrokecap\\"><a href=\\"#setstrokecap\\">setStrokeCap</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">setLineCap</strong></span></h3><p>Set the stroke cap to use.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setStrokeCap</span><span>(</span><span><span class=\\"code-argument\\">value</span>: <span class=\\"code-type\\">LineCap</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">LineCap</span> = <span class=\\"code-type\\">&#x27;butt&#x27; | &#x27;round&#x27; | &#x27;square&#x27;</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"getstrokecap\\"><a href=\\"#getstrokecap\\">getStrokeCap</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">getLineCap</strong></span></h3><p>Get the stroke cap that is being used.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getStrokeCap</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">LineCap</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">LineCap</span> = <span class=\\"code-type\\">&#x27;butt&#x27; | &#x27;round&#x27; | &#x27;square&#x27;</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"setstrokedash\\"><a href=\\"#setstrokedash\\">setStrokeDash</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">setLineDash</strong></span></h3><p>Set the stroke dash to use.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setStrokeDash</span><span>(</span><span><span class=\\"code-argument\\">segments</span>: <span class=\\"code-type\\">number[]</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getstrokedash\\"><a href=\\"#getstrokedash\\">getStrokeDash</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">getLineDash</strong></span></h3><p>Get the stroke dash that is being used.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getStrokeDash</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">number[]</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"setstrokedashoffset\\"><a href=\\"#setstrokedashoffset\\">setStrokeDashOffset</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">setLineDashOffset</strong></span></h3><p>Set the stroke dash offset to use.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setStrokeDashOffset</span><span>(</span><span><span class=\\"code-argument\\">value</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getstrokedashoffset\\"><a href=\\"#getstrokedashoffset\\">getStrokeDashOffset</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">getLineDashOffset</strong></span></h3><p>Get the stroke dash offset that is being used.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getStrokeDashOffset</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"setstrokejoin\\"><a href=\\"#setstrokejoin\\">setStrokeJoin</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">setLineJoin</strong></span></h3><p>Set the stroke join to use.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setStrokeJoin</span><span>(</span><span><span class=\\"code-argument\\">value</span>: <span class=\\"code-type\\">LineJoin</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">LineJoin</span> = <span class=\\"code-type\\">&#x27;bevel&#x27; | &#x27;round&#x27; | &#x27;miter&#x27;</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"getstrokejoin\\"><a href=\\"#getstrokejoin\\">getStrokeJoin</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">getLineJoin</strong></span></h3><p>Get the stroke join that is being used.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getStrokeJoin</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">LineJoin</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">LineJoin</span> = <span class=\\"code-type\\">&#x27;bevel&#x27; | &#x27;round&#x27; | &#x27;miter&#x27;</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"setstrokewidth\\"><a href=\\"#setstrokewidth\\">setStrokeWidth</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">setLineWidth</strong></span></h3><p>Set the stroke width to use.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setStrokeWidth</span><span>(</span><span><span class=\\"code-argument\\">value</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getstrokewidth\\"><a href=\\"#getstrokewidth\\">getStrokeWidth</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">getLineWidth</strong></span></h3><p>Get the stroke width that is being used.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getStrokeWidth</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"setmiterlimit\\"><a href=\\"#setmiterlimit\\">setMiterLimit</a></h3><p>Set the miter limit to use.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setMiterLimit</span><span>(</span><span><span class=\\"code-argument\\">value</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getmiterlimit\\"><a href=\\"#getmiterlimit\\">getMiterLimit</a></h3><p>Get the miter limit that is being used.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getMiterLimit</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div></pre></div></div><div class=\\"group\\"><h2 class=\\"group-header\\" id=\\"fill-styles\\"><a href=\\"#fill-styles\\">Fill styles</a></h2><p>A collection of methods for getting and setting fill styles,
and applying fills to existing shapes.</p><div class=\\"method\\"><h3 id=\\"fill\\"><a href=\\"#fill\\">fill</a></h3><p>Apply a fill to the current shape.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">fill</span><span>(</span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">fill</span><span>(</span><span><span class=\\"code-argument\\">fillRule</span>?: <span class=\\"code-type\\">FillRule</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">fill</span><span>(</span><span><span class=\\"code-argument\\">color</span>: <span class=\\"code-type\\">string</span><span>, </span></span><span><span class=\\"code-argument\\">fillRule</span>: <span class=\\"code-type\\">FillRule</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">FillRule</span> = <span class=\\"code-type\\">&#x27;nonzero&#x27; | &#x27;evenodd&#x27;</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"fillcanvas\\"><a href=\\"#fillcanvas\\">fillCanvas</a></h3><p>Apply a fill to the entire canvas area.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">fillCanvas</span><span>(</span><span><span class=\\"code-argument\\">color</span>?: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"clearcanvas\\"><a href=\\"#clearcanvas\\">clearCanvas</a></h3><p>Clear the entire canvas area</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">clearCanvas</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"clearrect\\"><a href=\\"#clearrect\\">clearRect</a></h3><p>Clear a rectangular area of the canvas.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">clearRect</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">width</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">height</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"setfill\\"><a href=\\"#setfill\\">setFill</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">setFillStyle</strong></span></h3><p>Set the fill to use.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setFill</span><span>(</span><span><span class=\\"code-argument\\">value</span>: <span class=\\"code-type\\">FillOrStrokeStyle</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">FillOrStrokeStyle</span> = <span class=\\"code-type\\">string | CanvasGradient | CanvasPattern</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"getfill\\"><a href=\\"#getfill\\">getFill</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">getFillStyle</strong></span></h3><p>Get the fill that is being used.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getFill</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">FillOrStrokeStyle</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">FillOrStrokeStyle</span> = <span class=\\"code-type\\">string | CanvasGradient | CanvasPattern</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"createlineargradient\\"><a href=\\"#createlineargradient\\">createLinearGradient</a></h3><p>Create a linear gradient to use as a fill.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">createLinearGradient</span><span>(</span><span><span class=\\"code-argument\\">x0</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y0</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">x1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y1</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">CanvasGradient</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"createradialgradient\\"><a href=\\"#createradialgradient\\">createRadialGradient</a></h3><p>Create a radial gradient to use as a fill.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">createRadialGradient</span><span>(</span><span><span class=\\"code-argument\\">x0</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y0</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">r0</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">x1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">r1</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">CanvasGradient</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"createpattern\\"><a href=\\"#createpattern\\">createPattern</a></h3><p>Create a pattern to be used as a fill.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">createPattern</span><span>(</span><span><span class=\\"code-argument\\">image</span>: <span class=\\"code-type\\">HTMLCanvasElement | HTMLImageElement | HTMLVideoElement</span><span>, </span></span><span><span class=\\"code-argument\\">repetition</span>: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">CanvasPattern</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"drawimage\\"><a href=\\"#drawimage\\">drawImage</a></h3><p>Draw an image to the canvas.
If the second position / size arguments are supplied, the first will be used for cropping the image,
and the second for the position and size it will be drawn.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">drawImage</span><span>(</span><span><span class=\\"code-argument\\">image</span>: <span class=\\"code-type\\">ImageLike</span><span>, </span></span><span><span class=\\"code-argument\\">dstX</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">dstY</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">drawImage</span><span>(</span><span><span class=\\"code-argument\\">image</span>: <span class=\\"code-type\\">ImageLike</span><span>, </span></span><span><span class=\\"code-argument\\">dstX</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">dstY</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">dstW</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">dstH</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">drawImage</span><span>(</span><span><span class=\\"code-argument\\">image</span>: <span class=\\"code-type\\">ImageLike</span><span>, </span></span><span><span class=\\"code-argument\\">srcX</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">srcY</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">srcW</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">srcH</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">dstX</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">dstY</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">dstW</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">dstH</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">ImageLike</span> = <span class=\\"code-type\\">HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap</span>;</div></pre></div></div><div class=\\"group\\"><h2 class=\\"group-header\\" id=\\"image-data\\"><a href=\\"#image-data\\">Image Data</a></h2><p>A collection of methods for creating, putting, or getting image data about the canvas.</p><div class=\\"method\\"><h3 id=\\"getdataurl\\"><a href=\\"#getdataurl\\">getDataURL</a></h3><p>Get a data URL of the current canvas state.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getDataURL</span><span>(</span><span><span class=\\"code-argument\\">type</span>?: <span class=\\"code-type\\">string</span><span>, </span></span><span><span class=\\"code-argument\\">...args</span>: <span class=\\"code-type\\">any[]</span></span><span>) =&gt; <span class=\\"code-type\\">string</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"createimagedata\\"><a href=\\"#createimagedata\\">createImageData</a></h3><p>Create image data with either the width and height specified,
or with the width and height of a the image data supplied.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">createImageData</span><span>(</span><span><span class=\\"code-argument\\">width</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">height</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">ImageData</span>;</span></div><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">createImageData</span><span>(</span><span><span class=\\"code-argument\\">ImageData</span>: <span class=\\"code-type\\">ImageData</span></span><span>) =&gt; <span class=\\"code-type\\">ImageData</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getimagedata\\"><a href=\\"#getimagedata\\">getImageData</a></h3><p>Get the image data from an area of the canvas.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getImageData</span><span>(</span><span><span class=\\"code-argument\\">sx</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">sy</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">sw</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">sh</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">ImageData</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"putimagedata\\"><a href=\\"#putimagedata\\">putImageData</a></h3><p>Draw image data onto the canvas.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">putImageData</span><span>(</span><span><span class=\\"code-argument\\">imagedata</span>: <span class=\\"code-type\\">ImageData</span><span>, </span></span><span><span class=\\"code-argument\\">dx</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">dy</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">dirtyX</span>?: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">dirtyY</span>?: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">dirtyWidth</span>?: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">dirtyHeight</span>?: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getpixeldata\\"><a href=\\"#getpixeldata\\">getPixelData</a></h3><p>Get image data about a specific pixel.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getPixelData</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Uint8ClampedArray</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getpixelcolor\\"><a href=\\"#getpixelcolor\\">getPixelColor</a></h3><p>Get the color of a specific pixel.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getPixelColor</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">string</span>;</span></div></pre></div></div><div class=\\"group\\"><h2 class=\\"group-header\\" id=\\"color-helpers\\"><a href=\\"#color-helpers\\">Color Helpers</a></h2><p>A collection of methods to help with creating color strings.</p><div class=\\"method\\"><h3 id=\\"createhsl\\"><a href=\\"#createhsl\\">createHSL</a></h3><p>Create an HSL color string from the given values.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">createHSL</span><span>(</span><span><span class=\\"code-argument\\">h</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">s</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">l</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">string</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"createhsla\\"><a href=\\"#createhsla\\">createHSLA</a></h3><p>Create an HSLA color string from the given values.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">createHSLA</span><span>(</span><span><span class=\\"code-argument\\">h</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">s</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">l</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">a</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">string</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"creatergb\\"><a href=\\"#creatergb\\">createRGB</a></h3><p>Create an RGB color string from the given values.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">createRGB</span><span>(</span><span><span class=\\"code-argument\\">r</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">g</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">b</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">string</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"creatergba\\"><a href=\\"#creatergba\\">createRGBA</a></h3><p>Create an RGBA color string from the given values.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">createRGBA</span><span>(</span><span><span class=\\"code-argument\\">r</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">g</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">b</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">a</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">string</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"gethslfromhsla\\"><a href=\\"#gethslfromhsla\\">getHSLFromHSLA</a></h3><p>Return an HSL color string from the given HSLA color string.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getHSLFromHSLA</span><span>(</span><span><span class=\\"code-argument\\">color</span>: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">string</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getrgbfromrgba\\"><a href=\\"#getrgbfromrgba\\">getRGBFromRGBA</a></h3><p>Return an RGB color string from the given RGBA color string.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getRGBFromRGBA</span><span>(</span><span><span class=\\"code-argument\\">color</span>: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">string</span>;</span></div></pre></div></div><div class=\\"group\\"><h2 class=\\"group-header\\" id=\\"converting-sizes\\"><a href=\\"#converting-sizes\\">Converting Sizes</a></h2><p>A collection of methods to help with calculating and converting sizes, and distances.</p><div class=\\"method\\"><h3 id=\\"getfractionfrompercent\\"><a href=\\"#getfractionfrompercent\\">getFractionFromPercent</a></h3><p>Get a fraction from the provided percent value e.g. 80 returns 0.8.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getFractionFromPercent</span><span>(</span><span><span class=\\"code-argument\\">percent</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getpercentfromfraction\\"><a href=\\"#getpercentfromfraction\\">getPercentFromFraction</a></h3><p>Get a percent from the provided fraction value e.g. 0.7 returns 70.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getPercentFromFraction</span><span>(</span><span><span class=\\"code-argument\\">fraction</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getfractionofwidth\\"><a href=\\"#getfractionofwidth\\">getFractionOfWidth</a></h3><p>Returns the actual value of a fraction of the canvas width e.g.
a canvas with a width of 200 returns 100 if the provided value is 0.5.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getFractionOfWidth</span><span>(</span><span><span class=\\"code-argument\\">fraction</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getfractionofheight\\"><a href=\\"#getfractionofheight\\">getFractionOfHeight</a></h3><p>Returns the actual value of a fraction of the canvas height e.g.
a canvas with a height of 100 returns 20 if the provided value is 0.2.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getFractionOfHeight</span><span>(</span><span><span class=\\"code-argument\\">fraction</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getpercentofwidth\\"><a href=\\"#getpercentofwidth\\">getPercentOfWidth</a></h3><p>Returns the actual value of a percentage of the canvas width e.g.
a canvas with a width of 200 returns 100 if the provided value is 50.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getPercentOfWidth</span><span>(</span><span><span class=\\"code-argument\\">percent</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getpercentofheight\\"><a href=\\"#getpercentofheight\\">getPercentOfHeight</a></h3><p>Returns the actual value of a percentage of the canvas height e.g.
a canvas with a height of 100 returns 20 if the provided value is 20.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getPercentOfHeight</span><span>(</span><span><span class=\\"code-argument\\">percent</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getdistance\\"><a href=\\"#getdistance\\">getDistance</a></h3><p>Returns the distance between 2 points.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getDistance</span><span>(</span><span><span class=\\"code-argument\\">x1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">x2</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y2</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div></pre></div></div><div class=\\"group\\"><h2 class=\\"group-header\\" id=\\"converting-angles\\"><a href=\\"#converting-angles\\">Converting Angles</a></h2><p>A collection of methods to help with calculating and converting angles.</p><div class=\\"method\\"><h3 id=\\"getradiansfromdegrees\\"><a href=\\"#getradiansfromdegrees\\">getRadiansFromDegrees</a></h3><p>Get a radian value from the provided degrees e.g. 90 returns 1.5708.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getRadiansFromDegrees</span><span>(</span><span><span class=\\"code-argument\\">degrees</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getdegreesfromradians\\"><a href=\\"#getdegreesfromradians\\">getDegreesFromRadians</a></h3><p>Get a degree value from the provided radians e.g. 3.14159 returns 180.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getDegreesFromRadians</span><span>(</span><span><span class=\\"code-argument\\">radians</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getangle\\"><a href=\\"#getangle\\">getAngle</a></h3><p>Get the angle (in radians) between 2 or 3 points.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getAngle</span><span>(</span><span><span class=\\"code-argument\\">x1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">x2</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y2</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getAngle</span><span>(</span><span><span class=\\"code-argument\\">x1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">x2</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y2</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">x3</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y3</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div></pre></div></div><div class=\\"group\\"><h2 class=\\"group-header\\" id=\\"path-plotting\\"><a href=\\"#path-plotting\\">Path Plotting</a></h2><p>A collection of methods for path drawing.</p><div class=\\"method\\"><h3 id=\\"beginpath\\"><a href=\\"#beginpath\\">beginPath</a></h3><p>Begin a new path (shape).</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">beginPath</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"closepath\\"><a href=\\"#closepath\\">closePath</a></h3><p>Close the current path (shape).</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">closePath</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"moveto\\"><a href=\\"#moveto\\">moveTo</a></h3><p>Move the starting point of a the next sub-path.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">moveTo</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"lineto\\"><a href=\\"#lineto\\">lineTo</a></h3><p>Connect the last point to the provided coordinates.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">lineTo</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"arcto\\"><a href=\\"#arcto\\">arcTo</a></h3><p>Arc from one point to another.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">arcTo</span><span>(</span><span><span class=\\"code-argument\\">x1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y1</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">x2</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y2</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">radius</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"beziercurveto\\"><a href=\\"#beziercurveto\\">bezierCurveTo</a></h3><p>Connect the last point to the provided coordinates with a bezier curve (2 control points).</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">bezierCurveTo</span><span>(</span><span><span class=\\"code-argument\\">cp1x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">cp1y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">cp2x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">cp2y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"quadraticcurveto\\"><a href=\\"#quadraticcurveto\\">quadraticCurveTo</a></h3><p>Connect the last point to the provided coordinates with a quadratic curve (1 control point).</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">quadraticCurveTo</span><span>(</span><span><span class=\\"code-argument\\">cpx</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">cpy</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div></div><div class=\\"group\\"><h2 class=\\"group-header\\" id=\\"canvas-state\\"><a href=\\"#canvas-state\\">Canvas State</a></h2><p>A collection of methods to save, restore, or transform the canvas state.</p><div class=\\"method\\"><h3 id=\\"save\\"><a href=\\"#save\\">save</a></h3><p>Push the current state of the canvas into a stack that can later be restored.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">save</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"restore\\"><a href=\\"#restore\\">restore</a></h3><p>Restore the most recent state of the canvas that was saved.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">restore</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"rotate\\"><a href=\\"#rotate\\">rotate</a></h3><p>Add rotation (in radians) to the transform matrix so that shapes can be drawn at an angle.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">rotate</span><span>(</span><span><span class=\\"code-argument\\">angle</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"scale\\"><a href=\\"#scale\\">scale</a></h3><p>Scale the transform matrix so that shapes can be drawn at the provided scale.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">scale</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"translate\\"><a href=\\"#translate\\">translate</a></h3><p>Move the canvas origin.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">translate</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"transform\\"><a href=\\"#transform\\">transform</a></h3><p>Multiply the current transformation with the provided matrix.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">transform</span><span>(</span><span><span class=\\"code-argument\\">m11</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">m12</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">m21</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">m22</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">dx</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">dy</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"settransform\\"><a href=\\"#settransform\\">setTransform</a></h3><p>Replace the current transformation with the provided matrix.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setTransform</span><span>(</span><span><span class=\\"code-argument\\">m11</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">m12</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">m21</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">m22</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">dx</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">dy</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"resettransform\\"><a href=\\"#resettransform\\">resetTransform</a></h3><p>Replace the current transformation with the default matrix: [1, 0, 0, 1, 0, 0].</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">resetTransform</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"clip\\"><a href=\\"#clip\\">clip</a></h3><p>Use the current path as a clipping path.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">clip</span><span>(</span><span><span class=\\"code-argument\\">fillRules</span>?: <span class=\\"code-type\\">FillRule</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">FillRule</span> = <span class=\\"code-type\\">&#x27;nonzero&#x27; | &#x27;evenodd&#x27;</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"setopacity\\"><a href=\\"#setopacity\\">setOpacity</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">setGlobalAlpha</strong></span></h3><p>Set the opacity to use for drawing.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setOpacity</span><span>(</span><span><span class=\\"code-argument\\">value</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getopacity\\"><a href=\\"#getopacity\\">getOpacity</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">getGlobalAlpha</strong></span></h3><p>Get the opacity that is being used.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getOpacity</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"setcompositeoperation\\"><a href=\\"#setcompositeoperation\\">setCompositeOperation</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">setGlobalCompositeOperation</strong></span></h3><p>Set the composite operation to use for drawing.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setCompositeOperation</span><span>(</span><span><span class=\\"code-argument\\">value</span>: <span class=\\"code-type\\">GlobalCompositeOperation</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">GlobalCompositeOperation</span> = <span class=\\"code-type\\">&#x27;source-over&#x27; | &#x27;source-in&#x27; | &#x27;source-out&#x27; | &#x27;source-atop&#x27; | &#x27;destination-over&#x27; | &#x27;destination-in&#x27; | &#x27;destination-out&#x27; | &#x27;destination-atop&#x27; | &#x27;lighter&#x27; | &#x27;copy&#x27; | &#x27;xor&#x27; | &#x27;multiply&#x27; | &#x27;screen&#x27; | &#x27;overlay&#x27; | &#x27;darken&#x27; | &#x27;lighten&#x27; | &#x27;color-dodge&#x27; | &#x27;color-burn&#x27; | &#x27;hard-light&#x27; | &#x27;soft-light&#x27; | &#x27;difference&#x27; | &#x27;exclusion&#x27; | &#x27;hue&#x27; | &#x27;saturation&#x27; | &#x27;color&#x27; | &#x27;luminosity&#x27;</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"getcompositeoperation\\"><a href=\\"#getcompositeoperation\\">getCompositeOperation</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">getGlobalCompositeOperation</strong></span></h3><p>Get the composite operation that is being used.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getCompositeOperation</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">GlobalCompositeOperation</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">GlobalCompositeOperation</span> = <span class=\\"code-type\\">&#x27;source-over&#x27; | &#x27;source-in&#x27; | &#x27;source-out&#x27; | &#x27;source-atop&#x27; | &#x27;destination-over&#x27; | &#x27;destination-in&#x27; | &#x27;destination-out&#x27; | &#x27;destination-atop&#x27; | &#x27;lighter&#x27; | &#x27;copy&#x27; | &#x27;xor&#x27; | &#x27;multiply&#x27; | &#x27;screen&#x27; | &#x27;overlay&#x27; | &#x27;darken&#x27; | &#x27;lighten&#x27; | &#x27;color-dodge&#x27; | &#x27;color-burn&#x27; | &#x27;hard-light&#x27; | &#x27;soft-light&#x27; | &#x27;difference&#x27; | &#x27;exclusion&#x27; | &#x27;hue&#x27; | &#x27;saturation&#x27; | &#x27;color&#x27; | &#x27;luminosity&#x27;</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"setimagesmoothingenabled\\"><a href=\\"#setimagesmoothingenabled\\">setImageSmoothingEnabled</a></h3><p>Set whether image smoothing should be used.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setImageSmoothingEnabled</span><span>(</span><span><span class=\\"code-argument\\">value</span>: <span class=\\"code-type\\">boolean</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getimagesmoothingenabled\\"><a href=\\"#getimagesmoothingenabled\\">getImageSmoothingEnabled</a></h3><p>Get whether image smoothing is being used.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getImageSmoothingEnabled</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">boolean</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"setshadowblur\\"><a href=\\"#setshadowblur\\">setShadowBlur</a></h3><p>Set how blurry shadows are.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setShadowBlur</span><span>(</span><span><span class=\\"code-argument\\">value</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getshadowblur\\"><a href=\\"#getshadowblur\\">getShadowBlur</a></h3><p>Get the value of how blurry shadows are.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getShadowBlur</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"setshadowcolor\\"><a href=\\"#setshadowcolor\\">setShadowColor</a></h3><p>Set the color to be used for shadows.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setShadowColor</span><span>(</span><span><span class=\\"code-argument\\">value</span>: <span class=\\"code-type\\">string</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getshadowcolor\\"><a href=\\"#getshadowcolor\\">getShadowColor</a></h3><p>Get the color being used for shadows.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getShadowColor</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">string</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"setshadowoffsetx\\"><a href=\\"#setshadowoffsetx\\">setShadowOffsetX</a></h3><p>Set how horizontally offset shadows should be.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setShadowOffsetX</span><span>(</span><span><span class=\\"code-argument\\">value</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getshadowoffsetx\\"><a href=\\"#getshadowoffsetx\\">getShadowOffsetX</a></h3><p>Get the value of how horizontally offset shadows should be.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getShadowOffsetX</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"setshadowoffsety\\"><a href=\\"#setshadowoffsety\\">setShadowOffsetY</a></h3><p>Set how vertically offset shadows should be.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">setShadowOffsetY</span><span>(</span><span><span class=\\"code-argument\\">value</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getshadowoffsety\\"><a href=\\"#getshadowoffsety\\">getShadowOffsetY</a></h3><p>Get the value of how vertically offset shadows should be.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getShadowOffsetY</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div></pre></div></div><div class=\\"group\\"><h2 class=\\"group-header\\" id=\\"misc\\"><a href=\\"#misc\\">Misc</a></h2><p>Miscellaneous methods.</p><div class=\\"method\\"><h3 id=\\"tap\\"><a href=\\"#tap\\">tap</a></h3><p>Break out of the method chain and execute a callback.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">tap</span><span>(</span><span><span class=\\"code-argument\\">callback</span>: <span class=\\"code-type\\">() =&gt; any</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"repeat\\"><a href=\\"#repeat\\">repeat</a></h3><p>Break out of the method chain and execute a callback with values between start and end,
increasing / decreasing by step (start defaults to 0, step defaults to 1).
You may return false from the callback at any point to stop at the current iteration.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">repeat</span><span>(</span><span><span class=\\"code-argument\\">end</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">callback</span>: <span class=\\"code-type\\">(i: number) =&gt; any</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">repeat</span><span>(</span><span><span class=\\"code-argument\\">start</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">end</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">callback</span>: <span class=\\"code-type\\">(i: number) =&gt; any</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">repeat</span><span>(</span><span><span class=\\"code-argument\\">start</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">end</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">step</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">callback</span>: <span class=\\"code-type\\">(i: number) =&gt; any</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"foreach\\"><a href=\\"#foreach\\">forEach</a></h3><p>Break out of the method chain and loop over the given array, object or string,
calling the callback with the value &amp; key / index.
You may return false from the callback at any point to stop at the current iteration.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">forEach</span><span>(</span><span><span class=\\"code-argument\\">str</span>: <span class=\\"code-type\\">string</span><span>, </span></span><span><span class=\\"code-argument\\">callback</span>: <span class=\\"code-type\\">(value: string, index: number) =&gt; any</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">forEach</span><span>(</span><span><span class=\\"code-argument\\">obj</span>: <span class=\\"code-type\\">any[]</span><span>, </span></span><span><span class=\\"code-argument\\">callback</span>: <span class=\\"code-type\\">(value: any, index: number) =&gt; any</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">forEach</span><span>(</span><span><span class=\\"code-argument\\">obj</span>: <span class=\\"code-type\\">{ [i: string]: any; }</span><span>, </span></span><span><span class=\\"code-argument\\">callback</span>: <span class=\\"code-type\\">(value: any, key: string) =&gt; any</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"constrain\\"><a href=\\"#constrain\\">constrain</a></h3><p>Constrain a number between a minimum and maximum value.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">constrain</span><span>(</span><span><span class=\\"code-argument\\">value</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">min</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">max</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"map\\"><a href=\\"#map\\">map</a></h3><p>Map a value from one range to another e.g. mapping 0.5 from 0-1 to 0-10 returns 5.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">map</span><span>(</span><span><span class=\\"code-argument\\">value</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">fromStart</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">fromEnd</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">toStart</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">toEnd</span>: <span class=\\"code-type\\">number</span></span><span>) =&gt; <span class=\\"code-type\\">number</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"drawfocusifneeded\\"><a href=\\"#drawfocusifneeded\\">drawFocusIfNeeded</a></h3><p>Draw a focus ring around the current path, or the path supplied,
if the element supplied has focus.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">drawFocusIfNeeded</span><span>(</span><span><span class=\\"code-argument\\">element</span>: <span class=\\"code-type\\">Element</span></span><span>) =&gt; <span class=\\"code-type\\">Canvasimo</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"ispointinpath\\"><a href=\\"#ispointinpath\\">isPointInPath</a></h3><p>Returns whether the given point is within the current or given path.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">isPointInPath</span><span>(</span><span><span class=\\"code-argument\\">x</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">y</span>: <span class=\\"code-type\\">number</span><span>, </span></span><span><span class=\\"code-argument\\">fillRule</span>?: <span class=\\"code-type\\">FillRule</span></span><span>) =&gt; <span class=\\"code-type\\">boolean</span>;</span></div></pre><pre><div>type <span class=\\"code-type\\">FillRule</span> = <span class=\\"code-type\\">&#x27;nonzero&#x27; | &#x27;evenodd&#x27;</span>;</div></pre></div><div class=\\"method\\"><h3 id=\\"ispointinstroke\\"><a href=\\"#ispointinstroke\\">isPointInStroke</a></h3><p>Returns whether the given point is within the area contained by applying
a stroke to the current or given path.</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">isPointInStroke</span><span>(</span><span>) =&gt; <span class=\\"code-type\\">boolean</span>;</span></div></pre></div><div class=\\"method\\"><h3 id=\\"getversion\\"><a href=\\"#getversion\\">getVersion</a><span class=\\"alias\\"><span class=\\"alias-word\\">Alias: </span><strong class=\\"alias-method\\">version</strong></span></h3><p>Return the current version of Canvasimo (and log to console if logInfo parameter is true)</p><pre><div><span class=\\"code-object\\">canvas</span><span>.</span><span class=\\"code-property\\">getVersion</span><span>(</span><span><span class=\\"code-argument\\">logInfo</span>?: <span class=\\"code-type\\">boolean</span></span><span>) =&gt; <span class=\\"code-type\\">string</span>;</span></div></pre></div></div></div></div></div><script type=\\"text/javascript\\">(function(i,s,o,g,r,a,m){i[\\"GoogleAnalyticsObject\\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,\\"script\\",\\"https://www.google-analytics.com/analytics.js\\",\\"ga\\");ga(\\"create\\", \\"UA-64450504-3\\", \\"auto\\");ga(\\"send\\", \\"pageview\\");</script><script type=\\"text/javascript\\" src=\\"build/js/bundle.js\\"></script></body></html>"
`;
