// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getDocJson should return a grouped list of available canvasimo properties 1`] = `
Array [
  Object {
    "description": "A collection of methods for getting and setting various properties of the canvas element.",
    "methods": Array [
      Object {
        "alias": "getElement",
        "description": "Get the canvas element.",
        "name": "getCanvas",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "HTMLCanvasElement",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Set the canvas pixel density.",
        "name": "setDensity",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "density",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get the canvas pixel density.",
        "name": "getDensity",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Set the canvas dimensions.",
        "name": "setSize",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": "{
  width: number;
  height: number;
}",
                "name": "size",
                "optional": false,
                "type": "Size",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "width",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "height",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "{
  width: number;
  height: number;
}",
            "name": "Size",
          },
        ],
      },
      Object {
        "alias": undefined,
        "description": "Get the canvas dimensions.",
        "name": "getSize",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": "{
  width: number;
  height: number;
}",
              "type": "Size",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "{
  width: number;
  height: number;
}",
            "name": "Size",
          },
        ],
      },
      Object {
        "alias": undefined,
        "description": "Set the canvas width.",
        "name": "setWidth",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "width",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get the canvas width.",
        "name": "getWidth",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Set the canvas height.",
        "name": "setHeight",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "height",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get the canvas height.",
        "name": "getHeight",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get the canvas size & position on screen.",
        "name": "getBoundingClientRect",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "ClientRect",
            },
          },
        ],
        "typeAliases": Array [],
      },
    ],
    "name": "Canvas element",
  },
  Object {
    "description": "'A collection of methods for retrieving a canvas context or information about the context.",
    "methods": Array [
      Object {
        "alias": undefined,
        "description": "Get the standard canvas context (used for drawing).",
        "name": "getContext",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "type",
                "optional": false,
                "type": "string",
              },
              Object {
                "alias": "Canvas2DContextAttributes | WebGLContextAttributes",
                "name": "contextAttributes",
                "optional": true,
                "type": "CanvasContextAttributes",
              },
            ],
            "returns": Object {
              "alias": "CanvasRenderingContext2D | WebGLRenderingContext | null",
              "type": "CanvasContext",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "Canvas2DContextAttributes | WebGLContextAttributes",
            "name": "CanvasContextAttributes",
          },
          Object {
            "alias": "CanvasRenderingContext2D | WebGLRenderingContext | null",
            "name": "CanvasContext",
          },
        ],
      },
      Object {
        "alias": undefined,
        "description": "Get canvas context used by Canvasimo (2d).",
        "name": "getCurrentContext",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "CanvasRenderingContext2D",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get the context type used by Canvasimo ('2d', 'webgl', etc).",
        "name": "getCurrentContextType",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "\\"2d\\"",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get the context attributes used.",
        "name": "getContextAttributes",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": "Canvas2DContextAttributes | WebGLContextAttributes",
              "type": "CanvasContextAttributes",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "Canvas2DContextAttributes | WebGLContextAttributes",
            "name": "CanvasContextAttributes",
          },
        ],
      },
    ],
    "name": "Context",
  },
  Object {
    "description": "A collection of methods for plotting or drawing solid shapes -
those that create a new shape when invoked, and are self closing.",
    "methods": Array [
      Object {
        "alias": "rect",
        "description": "Plot a rectangle that can then have a fill or stroke applied to it.",
        "name": "plotRect",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "width",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "height",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a rectangle and apply a stroke to it.",
        "name": "strokeRect",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "width",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "height",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a rectangle and apply a fill to it.",
        "name": "fillRect",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "width",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "height",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a rounded rectangle that can then have a fill or stroke applied to it.",
        "name": "plotRoundedRect",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "width",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "height",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radius",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a rounded rectangle and apply a stroke to it.",
        "name": "strokeRoundedRect",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "width",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "height",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radius",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a rounded rectangle and apply a fill to it.",
        "name": "fillRoundedRect",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "width",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "height",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radius",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a circle that can then have a stroke or fill applied to it.",
        "name": "plotCircle",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radius",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "anticlockwise",
                "optional": true,
                "type": "boolean",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a circle and apply a stroke to it.",
        "name": "strokeCircle",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radius",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "anticlockwise",
                "optional": true,
                "type": "boolean",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a circle and apply a fill to it.",
        "name": "fillCircle",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radius",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "anticlockwise",
                "optional": true,
                "type": "boolean",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a polygon that can then have a stroke or fill applied to it.",
        "name": "plotPoly",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radius",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "sides",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "anticlockwise",
                "optional": true,
                "type": "boolean",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a polygon and apply a stoke to it.",
        "name": "strokePoly",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radius",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "sides",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "anticlockwise",
                "optional": true,
                "type": "boolean",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a polygon and apply a fill to it.",
        "name": "fillPoly",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radius",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "sides",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "anticlockwise",
                "optional": true,
                "type": "boolean",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a star that can then have a stroke or fill applied to it.",
        "name": "plotStar",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radius1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "sides",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "anticlockwise",
                "optional": true,
                "type": "boolean",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a star and apply a stoke to it.",
        "name": "strokeStar",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radius1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "sides",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "anticlockwise",
                "optional": true,
                "type": "boolean",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a star and apply a fill to it.",
        "name": "fillStar",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radius1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "sides",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "anticlockwise",
                "optional": true,
                "type": "boolean",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a burst that can then have a stroke or fill applied to it.",
        "name": "plotBurst",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radius1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radius2",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "sides",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "anticlockwise",
                "optional": true,
                "type": "boolean",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a burst and apply a stoke to it.",
        "name": "strokeBurst",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radius1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radius2",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "sides",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "anticlockwise",
                "optional": true,
                "type": "boolean",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a burst and apply a fill to it.",
        "name": "fillBurst",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radius1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radius2",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "sides",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "anticlockwise",
                "optional": true,
                "type": "boolean",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a single pixel that can then have a stroke or fill applied to it.",
        "name": "plotPixel",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a single pixel and apply a stroke to it.",
        "name": "strokePixel",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a single pixel and apply a fill to it.",
        "name": "fillPixel",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a closed path that can then have a stroke or fill applied to it.",
        "name": "plotClosedPath",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": "Array<{x: number, y: number}> | Array<[number, number]> | number[]",
                "name": "points",
                "optional": false,
                "type": "Points",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "Array<{x: number, y: number}> | Array<[number, number]> | number[]",
            "name": "Points",
          },
        ],
      },
      Object {
        "alias": undefined,
        "description": "Plot a closed path and apply a stroke to it.",
        "name": "strokeClosedPath",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": "Array<{x: number, y: number}> | Array<[number, number]> | number[]",
                "name": "points",
                "optional": false,
                "type": "Points",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "Array<{x: number, y: number}> | Array<[number, number]> | number[]",
            "name": "Points",
          },
        ],
      },
      Object {
        "alias": undefined,
        "description": "Plot a closed path and apply a fill to it.",
        "name": "fillClosedPath",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": "Array<{x: number, y: number}> | Array<[number, number]> | number[]",
                "name": "points",
                "optional": false,
                "type": "Points",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "Array<{x: number, y: number}> | Array<[number, number]> | number[]",
            "name": "Points",
          },
        ],
      },
    ],
    "name": "Solid Shapes",
  },
  Object {
    "description": "A collection of methods for plotting or drawing open shapes -
those that create a new shape when invoked, but are not self closing.",
    "methods": Array [
      Object {
        "alias": undefined,
        "description": "Plot a line that can then have a stroke or fill applied to it.",
        "name": "plotLine",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "x2",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y2",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a line and apply a stroke to it.",
        "name": "strokeLine",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "x2",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y2",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a line, by length & angle, that can then have a stroke or fill applied to it.",
        "name": "plotLength",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "length",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "angle",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a line, by length & angle, and apply a stroke to it.",
        "name": "strokeLength",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "length",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "angle",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot a path, that is not self closing, that can have a stroke or fill applied to it.",
        "name": "plotPath",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": "Array<{x: number, y: number}> | Array<[number, number]> | number[]",
                "name": "points",
                "optional": false,
                "type": "Points",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "Array<{x: number, y: number}> | Array<[number, number]> | number[]",
            "name": "Points",
          },
        ],
      },
      Object {
        "alias": undefined,
        "description": "Plot a path, that is not self closing, and apply a stroke to it.",
        "name": "strokePath",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": "Array<{x: number, y: number}> | Array<[number, number]> | number[]",
                "name": "points",
                "optional": false,
                "type": "Points",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "Array<{x: number, y: number}> | Array<[number, number]> | number[]",
            "name": "Points",
          },
        ],
      },
      Object {
        "alias": undefined,
        "description": "Plot a path, that is not self closing, and apply a fill to it.",
        "name": "fillPath",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": "Array<{x: number, y: number}> | Array<[number, number]> | number[]",
                "name": "points",
                "optional": false,
                "type": "Points",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "Array<{x: number, y: number}> | Array<[number, number]> | number[]",
            "name": "Points",
          },
        ],
      },
    ],
    "name": "Open Shapes",
  },
  Object {
    "description": "A collection of methods for plotting or drawing paths -
shapes that can be connected to create more complex shapes.",
    "methods": Array [
      Object {
        "alias": "arc",
        "description": "Plot an arc that can have a stroke or fill applied to it.",
        "name": "plotArc",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radius",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "startAngle",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "endAngle",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "anticlockwise",
                "optional": true,
                "type": "boolean",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot an arc and apply a stroke to it.",
        "name": "strokeArc",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radius",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "startAngle",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "endAngle",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "anticlockwise",
                "optional": true,
                "type": "boolean",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot an arc and apply a fill to it.",
        "name": "fillArc",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radius",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "startAngle",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "endAngle",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "anticlockwise",
                "optional": true,
                "type": "boolean",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": "ellipse",
        "description": "Plot an ellipse that can then have a stroke or fill applied to it.",
        "name": "plotEllipse",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radiusX",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radiusY",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "rotation",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "startAngle",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "endAngle",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "anticlockwise",
                "optional": true,
                "type": "boolean",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot an ellipse and apply a stroke to it.",
        "name": "strokeEllipse",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radiusX",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radiusY",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "rotation",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "startAngle",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "endAngle",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "anticlockwise",
                "optional": true,
                "type": "boolean",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Plot an ellipse and apply a fill to it.",
        "name": "fillEllipse",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radiusX",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radiusY",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "rotation",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "startAngle",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "endAngle",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "anticlockwise",
                "optional": true,
                "type": "boolean",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
    ],
    "name": "Paths",
  },
  Object {
    "description": "A collection of methods for drawing text,
and getting and setting properties related to text rendering.",
    "methods": Array [
      Object {
        "alias": undefined,
        "description": "Draw a text with a stroke.",
        "name": "strokeText",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "text",
                "optional": false,
                "type": "string",
              },
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "maxWidth",
                "optional": true,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Draw a text with a fill.",
        "name": "fillText",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "text",
                "optional": false,
                "type": "string",
              },
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "maxWidth",
                "optional": true,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Draw text with a stroke, wrapped at newlines and automatically wrapped if the text exceeds the maxWidth.
If no maxWidth is specified text will only wrap at newlines (wordBreak is ignore).
Words will not break by default (normal) and therefore may overflow.
break-all will break words wherever possible, and break-word will only break words if there is not enough room.
The lineHeight parameter is a multiplier for the font size, and defaults to 1.",
        "name": "strokeTextMultiline",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "text",
                "optional": false,
                "type": "string",
              },
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "maxWidth",
                "optional": true,
                "type": "number",
              },
              Object {
                "alias": "'normal' | 'break-word' | 'break-all'",
                "name": "wordBreak",
                "optional": true,
                "type": "WordBreak",
              },
              Object {
                "alias": null,
                "name": "lineHeight",
                "optional": true,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "'normal' | 'break-word' | 'break-all'",
            "name": "WordBreak",
          },
        ],
      },
      Object {
        "alias": undefined,
        "description": "Draw text with a fill, wrapped at newlines and automatically wrapped if the text exceeds the maxWidth.
If no maxWidth is specified text will only wrap at newlines (wordBreak is ignore).
Words will not break by default (normal) and therefore may overflow.
break-all will break words wherever possible, and break-word will only break words if there is not enough room.
The lineHeight parameter is a multiplier for the font size, and defaults to 1.",
        "name": "fillTextMultiline",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "text",
                "optional": false,
                "type": "string",
              },
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "maxWidth",
                "optional": true,
                "type": "number",
              },
              Object {
                "alias": "'normal' | 'break-word' | 'break-all'",
                "name": "wordBreak",
                "optional": true,
                "type": "WordBreak",
              },
              Object {
                "alias": null,
                "name": "lineHeight",
                "optional": true,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "'normal' | 'break-word' | 'break-all'",
            "name": "WordBreak",
          },
        ],
      },
      Object {
        "alias": "measureText",
        "description": "Get information about the size text will be drawn.",
        "name": "getTextSize",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "text",
                "optional": false,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "TextMetrics",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Set the horizontal text alignment.",
        "name": "setTextAlign",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": "'left' | 'right' | 'center' | 'start' | 'end'",
                "name": "value",
                "optional": false,
                "type": "TextAlign",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "'left' | 'right' | 'center' | 'start' | 'end'",
            "name": "TextAlign",
          },
        ],
      },
      Object {
        "alias": undefined,
        "description": "Get the horizontal text alignment.",
        "name": "getTextAlign",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": "'left' | 'right' | 'center' | 'start' | 'end'",
              "type": "TextAlign",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "'left' | 'right' | 'center' | 'start' | 'end'",
            "name": "TextAlign",
          },
        ],
      },
      Object {
        "alias": undefined,
        "description": "Set the vertical text alignment.",
        "name": "setTextBaseline",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": "'top' | 'hanging' | 'middle' | 'alphabetic' | 'ideographic' | 'bottom'",
                "name": "value",
                "optional": false,
                "type": "TextBaseline",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "'top' | 'hanging' | 'middle' | 'alphabetic' | 'ideographic' | 'bottom'",
            "name": "TextBaseline",
          },
        ],
      },
      Object {
        "alias": undefined,
        "description": "Get the vertical text alignment.",
        "name": "getTextBaseline",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": "'top' | 'hanging' | 'middle' | 'alphabetic' | 'ideographic' | 'bottom'",
              "type": "TextBaseline",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "'top' | 'hanging' | 'middle' | 'alphabetic' | 'ideographic' | 'bottom'",
            "name": "TextBaseline",
          },
        ],
      },
    ],
    "name": "Text",
  },
  Object {
    "description": "A collection of methods for getting and setting font styles and variations.",
    "methods": Array [
      Object {
        "alias": undefined,
        "description": "Set the font to use.",
        "name": "setFont",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "font",
                "optional": false,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get the font that is being used.
This returns the exact CanvasRenderingContext2D.font string.",
        "name": "getFont",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "string",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Set the font family to use.",
        "name": "setFontFamily",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "family",
                "optional": false,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get the font that is being used.",
        "name": "getFontFamily",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "string",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Set the font size to use.",
        "name": "setFontSize",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "size",
                "optional": false,
                "type": "string | number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get the font size that is being used.
Returns null if using a special font e.g. caption, icon, menu.",
        "name": "getFontSize",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Set the font style to use.",
        "name": "setFontStyle",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "style",
                "optional": false,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get the font style that is being used.
Returns null if using a special font e.g. caption, icon, menu.",
        "name": "getFontStyle",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "string",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Set the font variant to use.",
        "name": "setFontVariant",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "variant",
                "optional": false,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get the font variant that is being used.
Returns null if using a special font e.g. caption, icon, menu.",
        "name": "getFontVariant",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "string",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Set the font weight to use.",
        "name": "setFontWeight",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "weight",
                "optional": false,
                "type": "string | number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get the font weight that is being used.
Returns null if using a special font e.g. caption, icon, menu.",
        "name": "getFontWeight",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "string | number",
            },
          },
        ],
        "typeAliases": Array [],
      },
    ],
    "name": "Fonts",
  },
  Object {
    "description": "A collection of methods for getting and setting stroke styles,
and applying strokes to existing shapes.",
    "methods": Array [
      Object {
        "alias": undefined,
        "description": "Apply a stroke to the current shape.",
        "name": "stroke",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "path",
                "optional": true,
                "type": "Path2D",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "color",
                "optional": false,
                "type": "string",
              },
              Object {
                "alias": null,
                "name": "path",
                "optional": false,
                "type": "Path2D",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": "setStrokeStyle",
        "description": "Set the stroke style to use.",
        "name": "setStroke",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": "string | CanvasGradient | CanvasPattern",
                "name": "value",
                "optional": false,
                "type": "FillOrStrokeStyle",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "string | CanvasGradient | CanvasPattern",
            "name": "FillOrStrokeStyle",
          },
        ],
      },
      Object {
        "alias": "getStrokeStyle",
        "description": "Get the stroke style that is being used.",
        "name": "getStroke",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": "string | CanvasGradient | CanvasPattern",
              "type": "FillOrStrokeStyle",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "string | CanvasGradient | CanvasPattern",
            "name": "FillOrStrokeStyle",
          },
        ],
      },
      Object {
        "alias": "setLineCap",
        "description": "Set the stroke cap to use.",
        "name": "setStrokeCap",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": "'butt' | 'round' | 'square'",
                "name": "value",
                "optional": false,
                "type": "LineCap",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "'butt' | 'round' | 'square'",
            "name": "LineCap",
          },
        ],
      },
      Object {
        "alias": "getLineCap",
        "description": "Get the stroke cap that is being used.",
        "name": "getStrokeCap",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": "'butt' | 'round' | 'square'",
              "type": "LineCap",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "'butt' | 'round' | 'square'",
            "name": "LineCap",
          },
        ],
      },
      Object {
        "alias": "setLineDash",
        "description": "Set the stroke dash to use.",
        "name": "setStrokeDash",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "segments",
                "optional": false,
                "type": "number[]",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": "getLineDash",
        "description": "Get the stroke dash that is being used.",
        "name": "getStrokeDash",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "number[]",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": "setLineDashOffset",
        "description": "Set the stroke dash offset to use.",
        "name": "setStrokeDashOffset",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "value",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": "getLineDashOffset",
        "description": "Get the stroke dash offset that is being used.",
        "name": "getStrokeDashOffset",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": "setLineJoin",
        "description": "Set the stroke join to use.",
        "name": "setStrokeJoin",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": "'bevel' | 'round' | 'miter'",
                "name": "value",
                "optional": false,
                "type": "LineJoin",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "'bevel' | 'round' | 'miter'",
            "name": "LineJoin",
          },
        ],
      },
      Object {
        "alias": "getLineJoin",
        "description": "Get the stroke join that is being used.",
        "name": "getStrokeJoin",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": "'bevel' | 'round' | 'miter'",
              "type": "LineJoin",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "'bevel' | 'round' | 'miter'",
            "name": "LineJoin",
          },
        ],
      },
      Object {
        "alias": "setLineWidth",
        "description": "Set the stroke width to use.",
        "name": "setStrokeWidth",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "value",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": "getLineWidth",
        "description": "Get the stroke width that is being used.",
        "name": "getStrokeWidth",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Set the miter limit to use.",
        "name": "setMiterLimit",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "value",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get the miter limit that is being used.",
        "name": "getMiterLimit",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
        ],
        "typeAliases": Array [],
      },
    ],
    "name": "Stroke Styles",
  },
  Object {
    "description": "A collection of methods for getting and setting fill styles,
and applying fills to existing shapes.",
    "methods": Array [
      Object {
        "alias": undefined,
        "description": "Apply a fill to the current shape.",
        "name": "fill",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
          Object {
            "parameters": Array [
              Object {
                "alias": "'nonzero' | 'evenodd'",
                "name": "fillRule",
                "optional": true,
                "type": "FillRule",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "color",
                "optional": false,
                "type": "string",
              },
              Object {
                "alias": "'nonzero' | 'evenodd'",
                "name": "fillRule",
                "optional": false,
                "type": "FillRule",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "'nonzero' | 'evenodd'",
            "name": "FillRule",
          },
        ],
      },
      Object {
        "alias": undefined,
        "description": "Apply a fill to the entire canvas area.",
        "name": "fillCanvas",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "color",
                "optional": true,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Clear the entire canvas area",
        "name": "clearCanvas",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Clear a rectangular area of the canvas.",
        "name": "clearRect",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "width",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "height",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": "setFillStyle",
        "description": "Set the fill to use.",
        "name": "setFill",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": "string | CanvasGradient | CanvasPattern",
                "name": "value",
                "optional": false,
                "type": "FillOrStrokeStyle",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "string | CanvasGradient | CanvasPattern",
            "name": "FillOrStrokeStyle",
          },
        ],
      },
      Object {
        "alias": "getFillStyle",
        "description": "Get the fill that is being used.",
        "name": "getFill",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": "string | CanvasGradient | CanvasPattern",
              "type": "FillOrStrokeStyle",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "string | CanvasGradient | CanvasPattern",
            "name": "FillOrStrokeStyle",
          },
        ],
      },
      Object {
        "alias": undefined,
        "description": "Create a linear gradient to use as a fill.",
        "name": "createLinearGradient",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x0",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y0",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "x1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y1",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "CanvasGradient",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Create a radial gradient to use as a fill.",
        "name": "createRadialGradient",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x0",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y0",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "r0",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "x1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "r1",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "CanvasGradient",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Create a pattern to be used as a fill.",
        "name": "createPattern",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "image",
                "optional": false,
                "type": "HTMLCanvasElement | HTMLImageElement | HTMLVideoElement",
              },
              Object {
                "alias": null,
                "name": "repetition",
                "optional": false,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "CanvasPattern",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Draw an image to the canvas.
If the second position / size arguments are supplied, the first will be used for cropping the image,
and the second for the position and size it will be drawn.",
        "name": "drawImage",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": "HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap",
                "name": "image",
                "optional": false,
                "type": "ImageLike",
              },
              Object {
                "alias": null,
                "name": "dstX",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "dstY",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
          Object {
            "parameters": Array [
              Object {
                "alias": "HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap",
                "name": "image",
                "optional": false,
                "type": "ImageLike",
              },
              Object {
                "alias": null,
                "name": "dstX",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "dstY",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "dstW",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "dstH",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
          Object {
            "parameters": Array [
              Object {
                "alias": "HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap",
                "name": "image",
                "optional": false,
                "type": "ImageLike",
              },
              Object {
                "alias": null,
                "name": "srcX",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "srcY",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "srcW",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "srcH",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "dstX",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "dstY",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "dstW",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "dstH",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap",
            "name": "ImageLike",
          },
        ],
      },
    ],
    "name": "Fill styles",
  },
  Object {
    "description": "A collection of methods for creating, putting, or getting image data about the canvas.",
    "methods": Array [
      Object {
        "alias": undefined,
        "description": "Get a data URL of the current canvas state.",
        "name": "getDataURL",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "type",
                "optional": true,
                "type": "string",
              },
              Object {
                "alias": null,
                "name": "...args",
                "optional": false,
                "type": "any[]",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "string",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Create image data with either the width and height specified,
or with the width and height of a the image data supplied.",
        "name": "createImageData",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "width",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "height",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "ImageData",
            },
          },
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "ImageData",
                "optional": false,
                "type": "ImageData",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "ImageData",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get the image data from an area of the canvas.",
        "name": "getImageData",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "sx",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "sy",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "sw",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "sh",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "ImageData",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Draw image data onto the canvas.",
        "name": "putImageData",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "imagedata",
                "optional": false,
                "type": "ImageData",
              },
              Object {
                "alias": null,
                "name": "dx",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "dy",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "dirtyX",
                "optional": true,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "dirtyY",
                "optional": true,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "dirtyWidth",
                "optional": true,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "dirtyHeight",
                "optional": true,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get image data about a specific pixel.",
        "name": "getPixelData",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Uint8ClampedArray",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get the color of a specific pixel.",
        "name": "getPixelColor",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "string",
            },
          },
        ],
        "typeAliases": Array [],
      },
    ],
    "name": "Image Data",
  },
  Object {
    "description": "A collection of methods to help with creating color strings.",
    "methods": Array [
      Object {
        "alias": undefined,
        "description": "Create an HSL color string from the given values.",
        "name": "createHSL",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "h",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "s",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "l",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "string",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Create an HSLA color string from the given values.",
        "name": "createHSLA",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "h",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "s",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "l",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "a",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "string",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Create an RGB color string from the given values.",
        "name": "createRGB",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "r",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "g",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "b",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "string",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Create an RGBA color string from the given values.",
        "name": "createRGBA",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "r",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "g",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "b",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "a",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "string",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Return an HSL color string from the given HSLA color string.",
        "name": "getHSLFromHSLA",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "color",
                "optional": false,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "string",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Return an RGB color string from the given RGBA color string.",
        "name": "getRGBFromRGBA",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "color",
                "optional": false,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "string",
            },
          },
        ],
        "typeAliases": Array [],
      },
    ],
    "name": "Color Helpers",
  },
  Object {
    "description": "A collection of methods to help with calculating and converting sizes, and distances.",
    "methods": Array [
      Object {
        "alias": undefined,
        "description": "Get a fraction from the provided percent value e.g. 80 returns 0.8.",
        "name": "getFractionFromPercent",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "percent",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get a percent from the provided fraction value e.g. 0.7 returns 70.",
        "name": "getPercentFromFraction",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "fraction",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Returns the actual value of a fraction of the canvas width e.g.
a canvas with a width of 200 returns 100 if the provided value is 0.5.",
        "name": "getFractionOfWidth",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "fraction",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Returns the actual value of a fraction of the canvas height e.g.
a canvas with a height of 100 returns 20 if the provided value is 0.2.",
        "name": "getFractionOfHeight",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "fraction",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Returns the actual value of a percentage of the canvas width e.g.
a canvas with a width of 200 returns 100 if the provided value is 50.",
        "name": "getPercentOfWidth",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "percent",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Returns the actual value of a percentage of the canvas height e.g.
a canvas with a height of 100 returns 20 if the provided value is 20.",
        "name": "getPercentOfHeight",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "percent",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Returns the distance between 2 points.",
        "name": "getDistance",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "x2",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y2",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
        ],
        "typeAliases": Array [],
      },
    ],
    "name": "Converting Sizes",
  },
  Object {
    "description": "A collection of methods to help with calculating and converting angles.",
    "methods": Array [
      Object {
        "alias": undefined,
        "description": "Get a radian value from the provided degrees e.g. 90 returns 1.5708.",
        "name": "getRadiansFromDegrees",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "degrees",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get a degree value from the provided radians e.g. 3.14159 returns 180.",
        "name": "getDegreesFromRadians",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "radians",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get the angle (in radians) between 2 or 3 points.",
        "name": "getAngle",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "x2",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y2",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "x2",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y2",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "x3",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y3",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
        ],
        "typeAliases": Array [],
      },
    ],
    "name": "Converting Angles",
  },
  Object {
    "description": "A collection of methods for path drawing.",
    "methods": Array [
      Object {
        "alias": undefined,
        "description": "Begin a new path (shape).",
        "name": "beginPath",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Close the current path (shape).",
        "name": "closePath",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Move the starting point of a the next sub-path.",
        "name": "moveTo",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Connect the last point to the provided coordinates.",
        "name": "lineTo",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Arc from one point to another.",
        "name": "arcTo",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y1",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "x2",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y2",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "radius",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Connect the last point to the provided coordinates with a bezier curve (2 control points).",
        "name": "bezierCurveTo",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "cp1x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "cp1y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "cp2x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "cp2y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Connect the last point to the provided coordinates with a quadratic curve (1 control point).",
        "name": "quadraticCurveTo",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "cpx",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "cpy",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
    ],
    "name": "Path Plotting",
  },
  Object {
    "description": "A collection of methods to save, restore, or transform the canvas state.",
    "methods": Array [
      Object {
        "alias": undefined,
        "description": "Push the current state of the canvas into a stack that can later be restored.",
        "name": "save",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Restore the most recent state of the canvas that was saved.",
        "name": "restore",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Add rotation (in radians) to the transform matrix so that shapes can be drawn at an angle.",
        "name": "rotate",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "angle",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Scale the transform matrix so that shapes can be drawn at the provided scale.",
        "name": "scale",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Move the canvas origin.",
        "name": "translate",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Multiply the current transformation with the provided matrix.",
        "name": "transform",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "m11",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "m12",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "m21",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "m22",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "dx",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "dy",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Replace the current transformation with the provided matrix.",
        "name": "setTransform",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "m11",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "m12",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "m21",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "m22",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "dx",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "dy",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Replace the current transformation with the default matrix: [1, 0, 0, 1, 0, 0].",
        "name": "resetTransform",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Use the current path as a clipping path.",
        "name": "clip",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": "'nonzero' | 'evenodd'",
                "name": "fillRules",
                "optional": true,
                "type": "FillRule",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "'nonzero' | 'evenodd'",
            "name": "FillRule",
          },
        ],
      },
      Object {
        "alias": "setGlobalAlpha",
        "description": "Set the opacity to use for drawing.",
        "name": "setOpacity",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "value",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": "getGlobalAlpha",
        "description": "Get the opacity that is being used.",
        "name": "getOpacity",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": "setGlobalCompositeOperation",
        "description": "Set the composite operation to use for drawing.",
        "name": "setCompositeOperation",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": "'source-over' | 'source-in' | 'source-out' | 'source-atop' | 'destination-over' | 'destination-in' | 'destination-out' | 'destination-atop' | 'lighter' | 'copy' | 'xor' | 'multiply' | 'screen' | 'overlay' | 'darken' | 'lighten' | 'color-dodge' | 'color-burn' | 'hard-light' | 'soft-light' | 'difference' | 'exclusion' | 'hue' | 'saturation' | 'color' | 'luminosity'",
                "name": "value",
                "optional": false,
                "type": "GlobalCompositeOperation",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "'source-over' | 'source-in' | 'source-out' | 'source-atop' | 'destination-over' | 'destination-in' | 'destination-out' | 'destination-atop' | 'lighter' | 'copy' | 'xor' | 'multiply' | 'screen' | 'overlay' | 'darken' | 'lighten' | 'color-dodge' | 'color-burn' | 'hard-light' | 'soft-light' | 'difference' | 'exclusion' | 'hue' | 'saturation' | 'color' | 'luminosity'",
            "name": "GlobalCompositeOperation",
          },
        ],
      },
      Object {
        "alias": "getGlobalCompositeOperation",
        "description": "Get the composite operation that is being used.",
        "name": "getCompositeOperation",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": "'source-over' | 'source-in' | 'source-out' | 'source-atop' | 'destination-over' | 'destination-in' | 'destination-out' | 'destination-atop' | 'lighter' | 'copy' | 'xor' | 'multiply' | 'screen' | 'overlay' | 'darken' | 'lighten' | 'color-dodge' | 'color-burn' | 'hard-light' | 'soft-light' | 'difference' | 'exclusion' | 'hue' | 'saturation' | 'color' | 'luminosity'",
              "type": "GlobalCompositeOperation",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "'source-over' | 'source-in' | 'source-out' | 'source-atop' | 'destination-over' | 'destination-in' | 'destination-out' | 'destination-atop' | 'lighter' | 'copy' | 'xor' | 'multiply' | 'screen' | 'overlay' | 'darken' | 'lighten' | 'color-dodge' | 'color-burn' | 'hard-light' | 'soft-light' | 'difference' | 'exclusion' | 'hue' | 'saturation' | 'color' | 'luminosity'",
            "name": "GlobalCompositeOperation",
          },
        ],
      },
      Object {
        "alias": undefined,
        "description": "Set whether image smoothing should be used.",
        "name": "setImageSmoothingEnabled",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "value",
                "optional": false,
                "type": "boolean",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get whether image smoothing is being used.",
        "name": "getImageSmoothingEnabled",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "boolean",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Set how blurry shadows are.",
        "name": "setShadowBlur",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "value",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get the value of how blurry shadows are.",
        "name": "getShadowBlur",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Set the color to be used for shadows.",
        "name": "setShadowColor",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "value",
                "optional": false,
                "type": "string",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get the color being used for shadows.",
        "name": "getShadowColor",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "string",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Set how horizontally offset shadows should be.",
        "name": "setShadowOffsetX",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "value",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get the value of how horizontally offset shadows should be.",
        "name": "getShadowOffsetX",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Set how vertically offset shadows should be.",
        "name": "setShadowOffsetY",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "value",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Get the value of how vertically offset shadows should be.",
        "name": "getShadowOffsetY",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
        ],
        "typeAliases": Array [],
      },
    ],
    "name": "Canvas State",
  },
  Object {
    "description": "Miscellaneous methods.",
    "methods": Array [
      Object {
        "alias": undefined,
        "description": "Break out of the method chain and execute a callback.",
        "name": "tap",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "callback",
                "optional": false,
                "type": "() => any",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Break out of the method chain and execute a callback with values between start and end,
increasing / decreasing by step (start defaults to 0, step defaults to 1).
You may return false from the callback at any point to stop at the current iteration.",
        "name": "repeat",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "end",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "callback",
                "optional": false,
                "type": "(i: number) => any",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "start",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "end",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "callback",
                "optional": false,
                "type": "(i: number) => any",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "start",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "end",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "step",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "callback",
                "optional": false,
                "type": "(i: number) => any",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Break out of the method chain and loop over the given array, object or string,
calling the callback with the value & key / index.
You may return false from the callback at any point to stop at the current iteration.",
        "name": "forEach",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "str",
                "optional": false,
                "type": "string",
              },
              Object {
                "alias": null,
                "name": "callback",
                "optional": false,
                "type": "(value: string, index: number) => any",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "obj",
                "optional": false,
                "type": "any[]",
              },
              Object {
                "alias": null,
                "name": "callback",
                "optional": false,
                "type": "(value: any, index: number) => any",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "obj",
                "optional": false,
                "type": "{ [i: string]: any; }",
              },
              Object {
                "alias": null,
                "name": "callback",
                "optional": false,
                "type": "(value: any, key: string) => any",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Constrain a number between a minimum and maximum value.",
        "name": "constrain",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "value",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "min",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "max",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Map a value from one range to another e.g. mapping 0.5 from 0-1 to 0-10 returns 5.",
        "name": "map",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "value",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "fromStart",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "fromEnd",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "toStart",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "toEnd",
                "optional": false,
                "type": "number",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "number",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Draw a focus ring around the current path, or the path supplied,
if the element supplied has focus.",
        "name": "drawFocusIfNeeded",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "element",
                "optional": false,
                "type": "Element",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "Canvasimo",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": undefined,
        "description": "Returns whether the given point is within the current or given path.",
        "name": "isPointInPath",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "x",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": null,
                "name": "y",
                "optional": false,
                "type": "number",
              },
              Object {
                "alias": "'nonzero' | 'evenodd'",
                "name": "fillRule",
                "optional": true,
                "type": "FillRule",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "boolean",
            },
          },
        ],
        "typeAliases": Array [
          Object {
            "alias": "'nonzero' | 'evenodd'",
            "name": "FillRule",
          },
        ],
      },
      Object {
        "alias": undefined,
        "description": "Returns whether the given point is within the area contained by applying
a stroke to the current or given path.",
        "name": "isPointInStroke",
        "signatures": Array [
          Object {
            "parameters": Array [],
            "returns": Object {
              "alias": null,
              "type": "boolean",
            },
          },
        ],
        "typeAliases": Array [],
      },
      Object {
        "alias": "version",
        "description": "Return the current version of Canvasimo (and log to console if logInfo parameter is true)",
        "name": "getVersion",
        "signatures": Array [
          Object {
            "parameters": Array [
              Object {
                "alias": null,
                "name": "logInfo",
                "optional": true,
                "type": "boolean",
              },
            ],
            "returns": Object {
              "alias": null,
              "type": "string",
            },
          },
        ],
        "typeAliases": Array [],
      },
    ],
    "name": "Misc",
  },
]
`;
